{"version":3,"sources":["components/firebase.js","stores/auth-context.js","stores/quiz-context.js","components/Main.js","components/Auth.js","components/NavBar/Navigation.js","components/Quiz/Score.js","components/Quiz/Quiz.js","components/Users.js","components/Quiz/CreateQuiz.js","PrivateRoute.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","db","firestore","realdatabase","database","AuthContext","createContext","useAuth","useContext","AuthContextProvider","props","useState","currentUser","setCurrentUser","isAdmin","isMod","roles","setRoles","loading","setLoading","error","history","useHistory","signUp","email","password","firstName","lastName","a","createUserWithEmailAndPassword","then","newUser","collection","doc","uid","set","userInfo","user","useEffect","onAuthStateChanged","replace","get","response","data","contextValue","login","signInWithEmailAndPassword","logout","signOut","Provider","value","children","QuizContext","quizReducer","state","action","type","editQuiz","initialState","useStore","QuizContextProvider","useReducer","dispatch","Main","quizs","setQuizs","quizID","setQuizID","openInfo","setOpenInfo","popInfo","setPopInfo","toast","useToast","renderData","ref","on","querySnapshot","val","Object","values","getOwnPropertyNames","removeQuizHandler","quiz","child","remove","editQuizHandler","handleOpenInfo","prevState","snapshot","users","usersData","entries","tempUser","map","el","push","isOpen","onClose","align","variant","row","score","pt","spacing","pb","display","borderRadius","borderWidth","bg","py","w","base","md","p","h","alignItems","fontSize","mr","name","justifyContent","colorScheme","icon","InfoOutline","onClick","Edit","Delete","ArrowDown","size","height","width","color","_hover","position","title","description","status","duration","isClosable","playQuizHandler","Auth","isLogin","setIsLogin","isLoading","setIsLoading","useForm","register","handleSubmit","reset","getValues","setError","formState","errors","isSubmitting","maxWidth","px","textAlign","my","onSubmit","catch","message","err","errorCode","code","isInvalid","htmlFor","id","placeholder","required","minLength","confirmPassword","validate","Header","show","setShow","MenuItem","islast","to","isCreate","mb","sm","fontWeight","as","maxW","justify","wrap","Close","Hamburger","flexBasis","direction","style","textDecoration","e","preventDefault","Chart","pluginService","beforeDraw","chart","config","options","elements","center","ctx","centerConfig","fontStyle","txt","text","maxFontSize","sidePaddingCalculated","sidePadding","innerRadius","font","stringWidth","measureText","elementWidth","widthRatio","newFontSize","Math","floor","elementHeight","fontSizeToUse","min","minFontSize","lineHeight","wrapText","undefined","textBaseline","centerX","chartArea","left","right","centerY","top","bottom","fillStyle","fillText","words","split","line","lines","n","length","testLine","Score","scoree","total","datasets","backgroundColor","boxShadow","overflow","rounded","textTransform","legend","toFixed","tooltips","enabled","Quiz","questions","setQuestions","currentQuest","setCurrentQuest","showScore","setShowScore","quizNameKey","setQuizNameKey","selectedAns","setSelectedAns","setScore","params","useParams","currentPage","quizId","tempData","flexDirection","event","tempScore","answers","element","index","isCorrect","question","bgColor","correctAnswers","updateAnswer","isRequired","pl","Users","effectedUsers","setEffectedUsers","setUsers","forEach","overflowX","disabled","onChange","userData","effected","newValue","target","selectInputHandler","defaultValue","role","mt","CreateQuiz","setName","newChoices","setNewChoices","choices","setChoices","correctAns","setCorrectAns","formValues","setFormValues","console","log","IdQuiz","forms","choicess","newChoicess","newCorrect","i","choicesName","j","QuestionList","questionList","String","fromCharCode","toUpperCase","once","dataName","update","className","newFormValues","changeQuestionHandler","flexWrap","Array","fill","_","newArr","updateChoices","updateCorrectAns","tempChoices","handleAddChoices","handleRemoveChoices","choiceValues","splice","slice","removeFormFields","PrivateModRoute","Component","component","rest","render","PrivateRoute","App","path","exact","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.48d7d84b.chunk.js","sourcesContent":["import firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/auth\";\r\nimport \"firebase/compat/firestore\";\r\nimport \"firebase/compat/database\";\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: \"AIzaSyAIUyXqlnq0_p7Dtoej_vx1nQvWS-qUcU0\",\r\n  authDomain: \"react-69990.firebaseapp.com\",\r\n  databaseURL:\r\n    \"https://react-69990-default-rtdb.europe-west1.firebasedatabase.app\",\r\n  projectId: \"react-69990\",\r\n  storageBucket: \"react-69990.appspot.com\",\r\n  messagingSenderId: \"569670275960\",\r\n  appId: \"1:569670275960:web:872cb0c1b85921ca502e8d\",\r\n});\r\nexport const auth = firebase.auth();\r\nexport const db = app.firestore();\r\nexport const realdatabase = app.database();\r\n\r\nexport default app;\r\n","import { useState, useEffect, useContext, createContext } from \"react\";\r\nimport { auth, db } from \"../components/firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [roles, setRoles] = useState([{ isAdmin: false, isMod: false }]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const signUp = async (email, password, firstName, lastName) => {\r\n    return auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((newUser) => {\r\n        const userRef = db.collection(\"users\").doc(auth.currentUser.uid);\r\n        userRef.set({\r\n          userInfo: {\r\n            firstName,\r\n            lastName,\r\n            email: email,\r\n            uid: newUser.user.uid,\r\n            roles,\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\n  const login = (email, password) => {\r\n    return auth.signInWithEmailAndPassword(email, password);\r\n  };\r\n\r\n  const logout = () => {\r\n    return auth.signOut();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      setCurrentUser(user);\r\n\r\n      if (user) {\r\n        history.replace(\"/Quiz/\");\r\n\r\n        const userRef = db.collection(\"users\").doc(user.uid);\r\n        userRef.get().then((response) => {\r\n          setRoles(response.data().userInfo.roles);\r\n        });\r\n      }\r\n      setRoles([{ isAdmin: false, isMod: false }]);\r\n      setLoading(false);\r\n    });\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const contextValue = {\r\n    currentUser,\r\n    signUp,\r\n    login,\r\n    logout,\r\n    roles,\r\n    error,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {!loading && props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n","import { useReducer, useContext, createContext } from \"react\";\r\n\r\nconst QuizContext = createContext();\r\n\r\nconst quizReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"EDIT\":\r\n      return { editQuiz: true };\r\n    case \"DEFAULT\":\r\n      return { editQuiz: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  editQuiz: false,\r\n};\r\n\r\nexport const useStore = () => useContext(QuizContext);\r\n\r\nexport const QuizContextProvider = (props) => {\r\n  const [state, dispatch] = useReducer(quizReducer, initialState);\r\n\r\n  return (\r\n    <QuizContext.Provider value={[state, dispatch]}>\r\n      {props.children}\r\n    </QuizContext.Provider>\r\n  );\r\n};\r\n","import {\r\n  HStack,\r\n  VStack,\r\n  Text,\r\n  Flex,\r\n  Button,\r\n  Heading,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverBody,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { realdatabase } from \"./firebase\";\r\nimport { useAuth } from \"../stores/auth-context\";\r\nimport {\r\n  EditIcon,\r\n  DeleteIcon,\r\n  InfoOutlineIcon,\r\n  ArrowDownIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport { useStore } from \"../stores/quiz-context\";\r\n\r\nconst Main = () => {\r\n  const [, dispatch] = useStore();\r\n  const [quizs, setQuizs] = useState(null);\r\n  const [quizID, setQuizID] = useState(null);\r\n  const [openInfo, setOpenInfo] = useState(false);\r\n  const [popInfo, setPopInfo] = useState(null);\r\n  const { currentUser, roles } = useAuth();\r\n  const history = useHistory();\r\n  const toast = useToast();\r\n\r\n  const renderData = () => {\r\n    const ref = realdatabase.ref(\"/list\");\r\n    ref.on(\"value\", (querySnapshot) => {\r\n      const data = querySnapshot.val() || null;\r\n      if (data) {\r\n        setQuizs(Object.values(data));\r\n        setQuizID(Object.getOwnPropertyNames(data));\r\n      } else {\r\n        setQuizs(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    renderData();\r\n  }, [realdatabase]);\r\n\r\n  const playQuizHandler = (row) => {\r\n    if (!currentUser) {\r\n      toast({\r\n        position: \"bottom-left\",\r\n        title: \"Error\",\r\n        description: \"You should be logged in to play quiz!\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        isClosable: false,\r\n      });\r\n      return;\r\n    }\r\n    history.replace(`/Quiz/quiz/${row + 1}`);\r\n  };\r\n\r\n  const removeQuizHandler = (quiz) => {\r\n    realdatabase.ref(\"/list\").child(quizID[quiz]).remove();\r\n    renderData();\r\n  };\r\n\r\n  const editQuizHandler = (quiz) => {\r\n    dispatch({ type: \"EDIT\" });\r\n\r\n    history.replace(`/Quiz/edit-quiz/${quiz + 1}`);\r\n  };\r\n\r\n  const handleOpenInfo = (quiz) => {\r\n    setOpenInfo((prevState) => !prevState);\r\n    realdatabase.ref(\"/list/\" + quizID[quiz]).on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data && data.users) {\r\n        const usersData = Object.entries(data.users);\r\n        let tempUser = [];\r\n        usersData.map((el) => {\r\n          tempUser.push(el[1]);\r\n        });\r\n        setPopInfo(tempUser);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box>\r\n        <Modal isOpen={openInfo} onClose={handleOpenInfo}>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>Quiz Stats</ModalHeader>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              {popInfo == null && <Text align=\"center\">No stats found!</Text>}\r\n              {popInfo !== null && (\r\n                <Table variant=\"simple\">\r\n                  <Thead>\r\n                    <Tr>\r\n                      <Th>Name</Th>\r\n                      <Th>Score</Th>\r\n                    </Tr>\r\n                  </Thead>\r\n                  <Tbody>\r\n                    {popInfo.map((quiz, row) => (\r\n                      <Tr key={row}>\r\n                        <Td>{`${quiz.firstName + \" \" + quiz.lastName}`}</Td>\r\n                        <Td>{`${quiz.score}`}</Td>\r\n                      </Tr>\r\n                    ))}\r\n                  </Tbody>\r\n                </Table>\r\n              )}\r\n            </ModalBody>\r\n          </ModalContent>\r\n        </Modal>\r\n      </Box>\r\n      <VStack pt={6} spacing={4}>\r\n        <Heading pb={3}>Quizs</Heading>\r\n        {quizs !== null &&\r\n          quizs.map((quiz, row) => (\r\n            <HStack\r\n              key={row}\r\n              display=\"flex\"\r\n              borderRadius={30}\r\n              borderWidth={1}\r\n              bg=\"gray.300\"\r\n              py={2}\r\n              w={{ base: \"xs\", md: \"lg\" }}\r\n            >\r\n              <Box p={4} h=\"70px\" display=\"flex\" alignItems=\"center\">\r\n                <Text fontSize={20} mr={4}>\r\n                  {quiz.name}\r\n                </Text>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  {(roles[0].isAdmin || roles[0].isMod) && (\r\n                    <Box>\r\n                      <Box display={{ base: \"flex\", md: \"none\" }}>\r\n                        <Popover>\r\n                          <PopoverContent w=\"160px\">\r\n                            <PopoverArrow />\r\n                            <PopoverBody justifyContent=\"center\" display=\"flex\">\r\n                              <IconButton\r\n                                mr={2}\r\n                                aria-label=\"Info\"\r\n                                colorScheme=\"gray\"\r\n                                icon={<InfoOutlineIcon />}\r\n                                onClick={() => handleOpenInfo(row)}\r\n                              />\r\n                              <IconButton\r\n                                mr={2}\r\n                                aria-label=\"Edit Quiz\"\r\n                                colorScheme=\"gray\"\r\n                                icon={<EditIcon />}\r\n                                onClick={() => editQuizHandler(row)}\r\n                              />\r\n                              <IconButton\r\n                                aria-label=\"Remove Quiz\"\r\n                                colorScheme=\"gray\"\r\n                                icon={<DeleteIcon />}\r\n                                onClick={() => removeQuizHandler(row)}\r\n                              />\r\n                            </PopoverBody>\r\n                          </PopoverContent>\r\n\r\n                          <PopoverTrigger>\r\n                            <IconButton\r\n                              mr={2}\r\n                              aria-label=\"options\"\r\n                              colorScheme=\"gray\"\r\n                              icon={<ArrowDownIcon />}\r\n                            />\r\n                          </PopoverTrigger>\r\n                        </Popover>\r\n                      </Box>\r\n                      <Box display={{ base: \"none\", md: \"flex\" }}>\r\n                        <IconButton\r\n                          mr={2}\r\n                          aria-label=\"Info\"\r\n                          colorScheme=\"gray\"\r\n                          icon={<InfoOutlineIcon />}\r\n                          onClick={() => handleOpenInfo(row)}\r\n                        />\r\n                        <IconButton\r\n                          mr={2}\r\n                          aria-label=\"Edit Quiz\"\r\n                          colorScheme=\"gray\"\r\n                          icon={<EditIcon />}\r\n                          onClick={() => editQuizHandler(row)}\r\n                        />\r\n                        <IconButton\r\n                          mr={2}\r\n                          aria-label=\"Remove Quiz\"\r\n                          colorScheme=\"gray\"\r\n                          icon={<DeleteIcon />}\r\n                          onClick={() => removeQuizHandler(row)}\r\n                        />\r\n                      </Box>\r\n                    </Box>\r\n                  )}\r\n                  <Button\r\n                    mr={2}\r\n                    size=\"xs\"\r\n                    height=\"48px\"\r\n                    width=\"80px\"\r\n                    borderRadius={15}\r\n                    bg=\"gray.800\"\r\n                    color=\"white\"\r\n                    _hover={{ bg: \"gray.700\" }}\r\n                    onClick={() => playQuizHandler(row)}\r\n                  >\r\n                    Play\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            </HStack>\r\n          ))}\r\n        )\r\n      </VStack>\r\n    </Box>\r\n  );\r\n};\r\nexport default Main;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Flex, Stack, Box, Heading, Link } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormErrorMessage,\r\n} from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { useAuth } from \"../stores/auth-context\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nfunction Auth() {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const { signUp, login } = useAuth();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    getValues,\r\n    setError,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm();\r\n\r\n  const authSubmit = (values) => {\r\n    setIsLoading(true);\r\n\r\n    if (isLogin) {\r\n      login(values.email, values.password).catch(() =>\r\n        setError(\"auth\", {\r\n          type: \"auth\",\r\n          message: \"Incorrect email or password\",\r\n        })\r\n      );\r\n    } else {\r\n      signUp(\r\n        values.email,\r\n        values.password,\r\n        values.firstName,\r\n        values.lastName\r\n      ).catch((err) => {\r\n        const errorCode = err.code;\r\n        if (errorCode == \"auth/email-already-in-use\") {\r\n          setError(\"email\", {\r\n            type: \"email\",\r\n            message: \"Email is already in use.\",\r\n          });\r\n        }\r\n        if (errorCode == \"auth/invalid-email\") {\r\n          setError(\"email\", {\r\n            type: \"email\",\r\n            message: \"Email address is not valid.\",\r\n          });\r\n        }\r\n      });\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const authSwitchHandler = () => {\r\n    reset();\r\n    setIsLogin((prevState) => !prevState);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      pt={{ base: 0, md: 12 }}\r\n      align=\"center\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Box\r\n        borderWidth={{ base: 0, md: 1 }}\r\n        width=\"full\"\r\n        maxWidth=\"500px\"\r\n        px={4}\r\n        textAlign=\"center\"\r\n        borderRadius={4}\r\n      >\r\n        <Box my={4}>\r\n          <form onSubmit={handleSubmit(authSubmit)}>\r\n            <Heading>{isLogin ? \"Login\" : \"Register\"}</Heading>\r\n            <Box p={4}>\r\n              {!isLogin && (\r\n                <Box>\r\n                  <FormControl isInvalid={errors.firstName}>\r\n                    <FormLabel pt={4} htmlFor=\"firstName\">\r\n                      First name\r\n                    </FormLabel>\r\n                    <Input\r\n                      id=\"firstName\"\r\n                      placeholder=\"Enter your first name\"\r\n                      {...register(\"firstName\", {\r\n                        required: \"This is required\",\r\n                        minLength: {\r\n                          value: 4,\r\n                          message: \"Minimum length should be 4\",\r\n                        },\r\n                      })}\r\n                    />\r\n                    <FormErrorMessage>\r\n                      {errors.firstName && errors.firstName.message}\r\n                    </FormErrorMessage>\r\n                  </FormControl>\r\n                  <FormControl isInvalid={errors.lastName}>\r\n                    <FormLabel pt={4} htmlFor=\"lastName\">\r\n                      Last name\r\n                    </FormLabel>\r\n                    <Input\r\n                      id=\"lastName\"\r\n                      placeholder=\"Enter your last name\"\r\n                      {...register(\"lastName\", {\r\n                        required: \"This is required\",\r\n                        minLength: {\r\n                          value: 4,\r\n                          message: \"Minimum length should be 4\",\r\n                        },\r\n                      })}\r\n                    />\r\n                    <FormErrorMessage>\r\n                      {errors.lastName && errors.lastName.message}\r\n                    </FormErrorMessage>\r\n                  </FormControl>\r\n                </Box>\r\n              )}\r\n              <FormControl isInvalid={errors.email || errors.auth}>\r\n                <FormLabel pt={4} htmlFor=\"email\">\r\n                  Email address\r\n                </FormLabel>\r\n                <Input\r\n                  id=\"email\"\r\n                  placeholder=\"Enter your email address\"\r\n                  {...register(\"email\", {\r\n                    required: \"This is required\",\r\n                    minLength: {\r\n                      value: 4,\r\n                      message: \"Minimum length should be 4\",\r\n                    },\r\n                  })}\r\n                />\r\n                <FormErrorMessage>\r\n                  {errors.email && errors.email.message}\r\n                  {errors.auth && errors.auth.message}\r\n                </FormErrorMessage>\r\n              </FormControl>\r\n\r\n              <FormControl isInvalid={errors.password || errors.auth}>\r\n                <FormLabel pt={4} htmlFor=\"password\">\r\n                  Password\r\n                </FormLabel>\r\n                <Input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Enter your password\"\r\n                  {...register(\"password\", {\r\n                    required: \"This is required\",\r\n                    minLength: {\r\n                      value: 6,\r\n                      message: \"Minimum length should be 6\",\r\n                    },\r\n                  })}\r\n                />\r\n                <FormErrorMessage>\r\n                  {errors.auth && errors.auth.message}\r\n                  {errors.password && errors.password.message}\r\n                </FormErrorMessage>\r\n              </FormControl>\r\n\r\n              {!isLogin && (\r\n                <FormControl isInvalid={errors.confirmPassword}>\r\n                  <FormLabel pt={4} htmlFor=\"password\">\r\n                    Confirm Password\r\n                  </FormLabel>\r\n                  <Input\r\n                    id=\"confirmPassword\"\r\n                    type=\"password\"\r\n                    placeholder=\"Enter your password\"\r\n                    {...register(\"confirmPassword\", {\r\n                      validate: (value) => {\r\n                        if (value === getValues(\"password\")) {\r\n                          return true;\r\n                        } else {\r\n                          return <span>Password fields don't match</span>;\r\n                        }\r\n                      },\r\n\r\n                      required: \"Password required\",\r\n                    })}\r\n                  />\r\n                  <FormErrorMessage>\r\n                    {errors.confirmPassword && errors.confirmPassword.message}\r\n                  </FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Box>\r\n            <Button\r\n              type=\"submit\"\r\n              isLoading={isSubmitting}\r\n              width=\"full\"\r\n              colorScheme=\"blue\"\r\n            >\r\n              {isLoading\r\n                ? \"Sending request...\"\r\n                : isLogin\r\n                ? \"Sign In\"\r\n                : \"Sign Up\"}\r\n            </Button>\r\n            <Stack pt={2}>\r\n              <Link onClick={authSwitchHandler}>\r\n                {isLogin\r\n                  ? \"Create new account\"\r\n                  : \"Login with an existing account\"}\r\n              </Link>\r\n            </Stack>\r\n          </form>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n","import { useState, useContext } from \"react\";\r\nimport { Container, Flex, Box, Text, Link as LinkText } from \"@chakra-ui/react\";\r\nimport { CloseIcon, HamburgerIcon } from \"@chakra-ui/icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../../stores/auth-context\";\r\nimport { useStore } from \"../../stores/quiz-context\";\r\n\r\nconst Header = (props) => {\r\n  const { currentUser, logout, roles } = useAuth();\r\n  const [show, setShow] = useState(false);\r\n  const history = useHistory();\r\n  const [, dispatch] = useStore();\r\n\r\n  const handleLogout = (e) => {\r\n    e.preventDefault();\r\n    logout();\r\n    history.push(\"/Quiz/\");\r\n  };\r\n\r\n  const clickHandler = () => {\r\n    dispatch({ type: \"DEFAULT\" });\r\n  };\r\n\r\n  const MenuItem = ({ children, islast, to = \"/\", isCreate, onClick }) => {\r\n    return (\r\n      <Text\r\n        mb={{ base: islast ? 0 : 8, sm: 0 }}\r\n        mr={{ base: 0, sm: islast ? 0 : 8 }}\r\n        display=\"block\"\r\n        fontSize=\"lg\"\r\n        fontWeight=\"bold\"\r\n      >\r\n        {isCreate && (\r\n          <Link to={to} onClick={onClick}>\r\n            {children}\r\n          </Link>\r\n        )}\r\n        {!isCreate && (\r\n          <Link to={to} onClick={onClick}>\r\n            {children}\r\n          </Link>\r\n        )}\r\n      </Text>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      as=\"nav\"\r\n      mb={4}\r\n      p={4}\r\n      bg={\"blue.500\"}\r\n      color={\"white\"}\r\n      position=\"sticky\"\r\n    >\r\n      <Container maxW=\"container.lg\">\r\n        <Flex justify=\"space-between\" align=\"center\" wrap=\"wrap\" {...props}>\r\n          <Box>\r\n            <Text fontSize=\"2xl\" fontWeight=\"bold\">\r\n              <Link to=\"/Quiz/\">Quiz</Link>\r\n            </Text>\r\n          </Box>\r\n\r\n          <Box\r\n            display={{ base: \"block\", md: \"none\" }}\r\n            onClick={() => setShow(!show)}\r\n          >\r\n            {show ? <CloseIcon /> : <HamburgerIcon />}\r\n          </Box>\r\n\r\n          <Box\r\n            display={{ base: show ? \"block\" : \"none\", md: \"block\" }}\r\n            flexBasis={{ base: \"100%\", md: \"auto\" }}\r\n          >\r\n            <Flex\r\n              align=\"center\"\r\n              justify={[\"center\", \"space-between\"]}\r\n              direction={[\"column\", \"row\"]}\r\n            >\r\n              {currentUser && roles[0].isAdmin && (\r\n                <MenuItem to=\"/Quiz/users\">Users</MenuItem>\r\n              )}\r\n              {currentUser && (roles[0].isMod || roles[0].isAdmin) && (\r\n                <MenuItem\r\n                  isCreate\r\n                  to=\"/Quiz/create-quiz\"\r\n                  onClick={clickHandler}\r\n                >\r\n                  Create Quiz\r\n                </MenuItem>\r\n              )}\r\n              {currentUser ? (\r\n                <LinkText\r\n                  style={{ textDecoration: \"none\" }}\r\n                  fontSize=\"lg\"\r\n                  fontWeight=\"bold\"\r\n                  islast=\"true\"\r\n                  onClick={handleLogout}\r\n                >\r\n                  Logout\r\n                </LinkText>\r\n              ) : (\r\n                <MenuItem to=\"/Quiz/auth\" islast=\"true\">\r\n                  Sign In\r\n                </MenuItem>\r\n              )}\r\n            </Flex>\r\n          </Box>\r\n        </Flex>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Box, Text } from \"@chakra-ui/layout\";\r\nimport { Chart, Doughnut } from \"react-chartjs-2\";\r\nChart.pluginService.register({\r\n  beforeDraw: function (chart) {\r\n    if (chart.config.options.elements.center) {\r\n      // Get ctx from string\r\n      var ctx = chart.chart.ctx;\r\n\r\n      // Get options from the center object in options\r\n      var centerConfig = chart.config.options.elements.center;\r\n      var fontStyle = centerConfig.fontStyle || \"Arial\";\r\n      var txt = centerConfig.text;\r\n      var color = centerConfig.color || \"#000\";\r\n      var maxFontSize = centerConfig.maxFontSize || 75;\r\n      var sidePadding = centerConfig.sidePadding || 20;\r\n      var sidePaddingCalculated = (sidePadding / 100) * (chart.innerRadius * 2);\r\n      // Start with a base font of 30px\r\n      ctx.font = \"30px \" + fontStyle;\r\n\r\n      // Get the width of the string and also the width of the element minus 10 to give it 5px side padding\r\n      var stringWidth = ctx.measureText(txt).width;\r\n      var elementWidth = chart.innerRadius * 2 - sidePaddingCalculated;\r\n\r\n      // Find out how much the font can grow in width.\r\n      var widthRatio = elementWidth / stringWidth;\r\n      var newFontSize = Math.floor(30 * widthRatio);\r\n      var elementHeight = chart.innerRadius * 2;\r\n\r\n      // Pick a new font size so it will not be larger than the height of label.\r\n      var fontSizeToUse = Math.min(newFontSize, elementHeight, maxFontSize);\r\n      var minFontSize = centerConfig.minFontSize;\r\n      var lineHeight = centerConfig.lineHeight || 25;\r\n      var wrapText = false;\r\n\r\n      if (minFontSize === undefined) {\r\n        minFontSize = 20;\r\n      }\r\n\r\n      if (minFontSize && fontSizeToUse < minFontSize) {\r\n        fontSizeToUse = minFontSize;\r\n        wrapText = true;\r\n      }\r\n\r\n      // Set font settings to draw it correctly.\r\n      ctx.textAlign = \"center\";\r\n      ctx.textBaseline = \"middle\";\r\n      var centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\r\n      var centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\r\n      ctx.font = fontSizeToUse + \"px \" + fontStyle;\r\n      ctx.fillStyle = color;\r\n\r\n      if (!wrapText) {\r\n        ctx.fillText(txt, centerX, centerY);\r\n        return;\r\n      }\r\n\r\n      var words = txt.split(\" \");\r\n      var line = \"\";\r\n      var lines = [];\r\n\r\n      // Break words up into multiple lines if necessary\r\n      for (var n = 0; n < words.length; n++) {\r\n        var testLine = line + words[n] + \" \";\r\n        var metrics = ctx.measureText(testLine);\r\n        var testWidth = metrics.width;\r\n        if (testWidth > elementWidth && n > 0) {\r\n          lines.push(line);\r\n          line = words[n] + \" \";\r\n        } else {\r\n          line = testLine;\r\n        }\r\n      }\r\n\r\n      // Move the center up depending on line height and number of lines\r\n      centerY -= (lines.length / 2) * lineHeight;\r\n\r\n      for (var n = 0; n < lines.length; n++) {\r\n        ctx.fillText(lines[n], centerX, centerY);\r\n        centerY += lineHeight;\r\n      }\r\n      //Draw text in center\r\n      ctx.fillText(line, centerX, centerY);\r\n    }\r\n  },\r\n});\r\n\r\nconst Score = (props) => {\r\n  const scoree = (props.score / props.total) * 100;\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [scoree, 100 - scoree],\r\n        backgroundColor: [\"#0087c5\", \"#cde0f1\"],\r\n        borderWidth: 0.5,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      maxW={{ base: \"xs\", md: \"500px\" }}\r\n      w=\"full\"\r\n      bg=\"blue.500\"\r\n      pb={8}\r\n      boxShadow={\"2xl\"}\r\n      overflow={\"hidden\"}\r\n      rounded={\"md\"}\r\n    >\r\n      <Box bg=\"gray.800\">\r\n        <Text\r\n          color=\"white\"\r\n          textAlign=\"center\"\r\n          textTransform=\"uppercase\"\r\n          fontSize=\"20\"\r\n          py={3}\r\n        >\r\n          {`Score: ${props.score} / ${props.total}`}\r\n        </Text>\r\n      </Box>\r\n      <Box py={4}>\r\n        <Doughnut\r\n          data={data}\r\n          width={300}\r\n          height={200}\r\n          options={{\r\n            legend: {\r\n              display: false,\r\n            },\r\n            elements: {\r\n              center: {\r\n                text: `${(props.score / props.total).toFixed(2) * 100}%`,\r\n                color: \"white\",\r\n              },\r\n            },\r\n\r\n            tooltips: {\r\n              enabled: false,\r\n            },\r\n          }}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import {\r\n  Box,\r\n  Center,\r\n  Flex,\r\n  Text,\r\n  Button,\r\n  VStack,\r\n  RadioGroup,\r\n  Radio,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { realdatabase, db } from \"../firebase\";\r\nimport { useAuth } from \"../../stores/auth-context\";\r\nimport Score from \"./Score\";\r\n\r\nconst Quiz = () => {\r\n  const [questions, setQuestions] = useState(null);\r\n  const [currentQuest, setCurrentQuest] = useState(0);\r\n  const [showScore, setShowScore] = useState(false);\r\n  const [quizNameKey, setQuizNameKey] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedAns, setSelectedAns] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const params = useParams();\r\n  const { currentUser } = useAuth();\r\n\r\n  const currentPage = params.quizId - 1;\r\n\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      const ref = realdatabase.ref(\"/list\");\r\n      ref.on(\"value\", (querySnapshot) => {\r\n        const data = querySnapshot.val() || null;\r\n        if (data) {\r\n          const tempData = Object.values(data);\r\n          setQuestions(tempData[currentPage].questions);\r\n          setQuizNameKey(Object.getOwnPropertyNames(data)[currentPage]);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const updateAnswer = (row) => {\r\n    let correctAnswers = [...selectedAns];\r\n    correctAnswers[currentQuest] = row;\r\n    setSelectedAns(correctAnswers);\r\n  };\r\n\r\n  const prevQuestionHandler = () => {\r\n    if (currentQuest + 1 > 1) {\r\n      setCurrentQuest(currentQuest - 1);\r\n    }\r\n  };\r\n\r\n  const nextQuestionHandler = (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    if (currentQuest + 1 < questions.length) {\r\n      setCurrentQuest(currentQuest + 1);\r\n    } else {\r\n      let tempScore = 0;\r\n      questions.map((el, row) => {\r\n        el.answers.map((element, index) => {\r\n          if (element.isCorrect) {\r\n            if (index == selectedAns[row]) {\r\n              tempScore++;\r\n            }\r\n          }\r\n        });\r\n      });\r\n      setScore(tempScore);\r\n      setShowScore(true);\r\n\r\n      db.collection(\"users\")\r\n        .doc(currentUser.uid)\r\n        .get()\r\n        .then((snapshot) => {\r\n          const data = snapshot.data().userInfo;\r\n\r\n          realdatabase\r\n            .ref()\r\n            .child(\"/list/\")\r\n            .child(quizNameKey)\r\n            .child(\"users\")\r\n            .child(currentUser.uid)\r\n            .set({\r\n              firstName: data.firstName,\r\n              lastName: data.lastName,\r\n              email: data.email,\r\n              score: tempScore,\r\n            });\r\n        });\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {questions !== null && (\r\n        <Center py={9} flexDirection=\"column\">\r\n          <Text textAlign=\"center\" fontSize=\"25\" fontWeight={\"bold\"} py={4}>\r\n            {showScore\r\n              ? \"Quiz Results\"\r\n              : `Question ${currentQuest + 1} of ${questions.length}`}\r\n          </Text>\r\n          {!showScore && (\r\n            <Box\r\n              maxW={{ base: \"xs\", md: \"500px\" }}\r\n              w=\"full\"\r\n              bg=\"blue.500\"\r\n              pb={8}\r\n              boxShadow={\"2xl\"}\r\n              overflow={\"hidden\"}\r\n              rounded={\"md\"}\r\n            >\r\n              <form onSubmit={nextQuestionHandler}>\r\n                <Box bg=\"gray.800\">\r\n                  <Text\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    textTransform=\"uppercase\"\r\n                    fontSize=\"20\"\r\n                    py={3}\r\n                    px={10}\r\n                  >\r\n                    {questions[currentQuest].question}\r\n                  </Text>\r\n                </Box>\r\n                <VStack spacing={2} pt={8}>\r\n                  <RadioGroup\r\n                    name={\"choice\"}\r\n                    value={`${selectedAns[currentQuest]}`}\r\n                  >\r\n                    {questions[currentQuest].answers.map((data, row) => (\r\n                      <Flex\r\n                        key={row}\r\n                        borderRadius={15}\r\n                        bgColor=\"white\"\r\n                        my={4}\r\n                        py={1}\r\n                        px={2}\r\n                        align=\"center\"\r\n                        w={{ base: \"200px\", md: \"400px\" }}\r\n                        onClick={() => updateAnswer(row)}\r\n                      >\r\n                        <Radio size=\"lg\" isRequired value={`${row}`} />\r\n                        <Text fontSize={28} px={3} maxW={30} fontWeight=\"bold\">\r\n                          {data.id}\r\n                        </Text>\r\n                        <Text pl={4} fontSize={20}>\r\n                          {data.name}\r\n                        </Text>\r\n                      </Flex>\r\n                    ))}\r\n                  </RadioGroup>\r\n                </VStack>\r\n                <Flex justifyContent=\"space-around\">\r\n                  <Button onClick={prevQuestionHandler}>\r\n                    Previous question\r\n                  </Button>\r\n                  <Button type=\"submit\">\r\n                    {questions.length - 1 == currentQuest\r\n                      ? \"Submit quiz answers\"\r\n                      : \"Next question\"}\r\n                  </Button>\r\n                </Flex>\r\n              </form>\r\n            </Box>\r\n          )}\r\n          {showScore && <Score score={score} total={questions.length} />}\r\n        </Center>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Select,\r\n  Container,\r\n  Button,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { db } from \"./firebase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"../stores/auth-context\";\r\n\r\nconst Users = () => {\r\n  const { currentUser } = useAuth();\r\n  const [effectedUsers, setEffectedUsers] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\")\r\n      .get()\r\n      .then(function (snapshot) {\r\n        snapshot.forEach(function (doc) {\r\n          setUsers((prevState) => [...prevState, doc.data().userInfo]);\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const selectRoleValue = (role) => {\r\n    return role.isAdmin ? \"admin\" : role.isMod ? \"mod\" : \"user\";\r\n  };\r\n\r\n  const selectInputHandler = (event, row) => {\r\n    let userData = [...users];\r\n    let effected = [...effectedUsers];\r\n\r\n    const newValue = event.target.value;\r\n    if (newValue === \"mod\") {\r\n      userData[row].roles[0].isAdmin = false;\r\n      userData[row].roles[0].isMod = true;\r\n    }\r\n    if (newValue === \"admin\") {\r\n      userData[row].roles[0].isAdmin = true;\r\n      userData[row].roles[0].isMod = false;\r\n    }\r\n    if (newValue === \"user\") {\r\n      userData[row].roles[0].isAdmin = false;\r\n      userData[row].roles[0].isMod = false;\r\n    }\r\n    effected.push(row);\r\n    setEffectedUsers(effected);\r\n    setUsers(userData);\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    let usersData = [];\r\n    effectedUsers.map((el) => {\r\n      usersData.push(users[el]);\r\n    });\r\n    usersData.map((el) => {\r\n      const userRef = db.collection(\"users\").doc(el.uid);\r\n      userRef.set({\r\n        userInfo: usersData[0],\r\n      });\r\n    });\r\n    toast({\r\n      position: \"bottom-left\",\r\n      title: \"Users\",\r\n      description: `Users succesfully updated`,\r\n      status: \"success\",\r\n      duration: 3000,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Box overflowX={{ base: \"auto\", md: \"hidden\" }}>\r\n        <Table variant=\"simple\" w=\"md\">\r\n          <Thead>\r\n            <Tr>\r\n              <Th>Name</Th>\r\n              <Th>Email</Th>\r\n              <Th>Role</Th>\r\n            </Tr>\r\n          </Thead>\r\n          <Tbody>\r\n            {users !== null &&\r\n              users.map((quiz, row) => (\r\n                <Tr key={row}>\r\n                  <Td>{`${quiz.firstName + \" \" + quiz.lastName}`}</Td>\r\n                  <Td>{`${quiz.email}`}</Td>\r\n\r\n                  <Td w=\"full\">\r\n                    <Select\r\n                      disabled={quiz.uid === currentUser.uid}\r\n                      width={170}\r\n                      onChange={(e) => selectInputHandler(e, row)}\r\n                      defaultValue={selectRoleValue(quiz.roles[0])}\r\n                    >\r\n                      <option value=\"admin\">Administrator</option>\r\n                      <option value=\"mod\">Moderator</option>\r\n                      <option value=\"user\">User</option>\r\n                    </Select>\r\n                  </Td>\r\n                </Tr>\r\n              ))}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      <Box align=\"right\">\r\n        <Button onClick={submitHandler} mt={4}>\r\n          Submit\r\n        </Button>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import {\r\n  Center,\r\n  FormControl,\r\n  Input,\r\n  Heading,\r\n  FormLabel,\r\n  Box,\r\n  Button,\r\n  RadioGroup,\r\n  Radio,\r\n  useToast,\r\n  Flex,\r\n  Divider,\r\n} from \"@chakra-ui/react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { realdatabase } from \"../firebase\";\r\nimport { useStore } from \"../../stores/quiz-context\";\r\n\r\nconst CreateQuiz = () => {\r\n  const [state] = useStore();\r\n  const { editQuiz } = state;\r\n  const toast = useToast();\r\n  const params = useParams();\r\n\r\n  const history = useHistory();\r\n  const [name, setName] = useState(\"\");\r\n  const [newChoices, setNewChoices] = useState([4]);\r\n  const [choices, setChoices] = useState([[]]);\r\n  const [correctAns, setCorrectAns] = useState([]);\r\n  const [formValues, setFormValues] = useState([[]]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"sw\");\r\n    if (editQuiz) {\r\n      const ref = realdatabase.ref(\"/list\");\r\n      ref.on(\"value\", (querySnapshot) => {\r\n        const data = querySnapshot.val() || null;\r\n        if (data) {\r\n          const tempData = Object.values(data)[params.IdQuiz - 1];\r\n\r\n          let forms = [];\r\n          let choicess = [];\r\n          let newChoicess = [];\r\n          let newCorrect = [];\r\n          for (let i = 0; i < tempData.questions.length; i++) {\r\n            let choicesName = [];\r\n            forms.push(tempData.questions[i].question);\r\n            for (let j = 0; j < tempData.questions[i].answers.length; j++) {\r\n              choicesName.push(tempData.questions[i].answers[j].name);\r\n              if (tempData.questions[i].answers[j].isCorrect == true) {\r\n                newCorrect[i] = j;\r\n              }\r\n            }\r\n\r\n            choicess.push(choicesName);\r\n            newChoicess.push(tempData.questions[i].answers.length);\r\n          }\r\n          setName(tempData.name);\r\n          setNewChoices(newChoicess);\r\n          setFormValues(forms);\r\n          setChoices(choicess);\r\n          setCorrectAns(newCorrect);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const changeQuestionHandler = (i, e) => {\r\n    let newFormValues = [...formValues];\r\n    newFormValues[i] = e.target.value;\r\n    setFormValues(newFormValues);\r\n  };\r\n\r\n  const updateChoices = (index, row, e) => {\r\n    let newArr = [...choices];\r\n    newArr[index][row] = e.target.value;\r\n    setChoices(newArr);\r\n  };\r\n  const addFormFields = () => {\r\n    setFormValues([...formValues, []]);\r\n    setChoices([...choices, []]);\r\n    setNewChoices([...newChoices, 4]);\r\n    setCorrectAns([...correctAns, null]);\r\n  };\r\n\r\n  const removeFormFields = (i) => {\r\n    let newFormValues = [...formValues];\r\n    let choiceValues = [...choices];\r\n\r\n    newFormValues.splice(i, 1);\r\n    choiceValues.splice(i, 1);\r\n\r\n    setFormValues(newFormValues);\r\n    setChoices(choiceValues);\r\n    setNewChoices((prevState) => prevState.slice(0, -1));\r\n    setCorrectAns((prevState) => prevState.slice(0, -1));\r\n  };\r\n\r\n  const QuestionList = () => {\r\n    let questionList = [];\r\n    for (let i = 0; i < formValues.length; i++) {\r\n      let answers = [];\r\n      for (let j = 0; j < newChoices[i]; j++) {\r\n        answers.push({\r\n          id: String.fromCharCode(97 + j).toUpperCase(),\r\n          name: choices[i][j],\r\n          isCorrect: correctAns[i] == j ? true : false,\r\n        });\r\n      }\r\n\r\n      questionList.push({\r\n        question: formValues[i],\r\n        answers,\r\n      });\r\n    }\r\n    return questionList;\r\n  };\r\n\r\n  const handleAddChoices = (row) => {\r\n    if (newChoices[row] < 5) {\r\n      let tempChoices = [...newChoices];\r\n      tempChoices[row]++;\r\n      setNewChoices(tempChoices);\r\n    }\r\n  };\r\n  const handleRemoveChoices = (row) => {\r\n    if (newChoices[row] > 2) {\r\n      let tempChoices = [...newChoices];\r\n      tempChoices[row]--;\r\n      setNewChoices(tempChoices);\r\n    }\r\n  };\r\n\r\n  const updateCorrectAns = (i, e) => {\r\n    let correctAnswers = [...correctAns];\r\n    correctAnswers[i] = e.target.value;\r\n    setCorrectAns(correctAnswers);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    QuestionList();\r\n\r\n    const ref = realdatabase.ref(\"/list\");\r\n    if (editQuiz) {\r\n      ref.once(\"value\", (snapshot) => {\r\n        const data = snapshot.val();\r\n        const dataName = Object.getOwnPropertyNames(data)[params.IdQuiz - 1];\r\n        ref.child(dataName).update({\r\n          name,\r\n          questions: QuestionList(),\r\n        });\r\n      });\r\n    } else {\r\n      ref.push({\r\n        name,\r\n        questions: QuestionList(),\r\n      });\r\n    }\r\n    toast({\r\n      position: \"bottom-left\",\r\n      title: \"Quiz\",\r\n      description: `Quiz was succesfully ${editQuiz ? \"edited\" : \"created\"}`,\r\n      status: \"success\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n    });\r\n    history.replace(\"/Quiz/\");\r\n  };\r\n\r\n  return (\r\n    <Center align=\"center\" py={9} flexDirection=\"column\">\r\n      <Heading>{editQuiz ? \"Edit Quiz\" : \"Create Quiz\"}</Heading>\r\n      <Box width={{ base: \"xs\", md: \"4xl\" }}>\r\n        <FormControl align=\"left\">\r\n          <form onSubmit={handleSubmit}>\r\n            <FormLabel htmlFor=\"name\" id=\"name\">\r\n              Quiz Name\r\n            </FormLabel>\r\n            <Box>\r\n              <Input\r\n                required\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                id=\"name\"\r\n                type=\"text\"\r\n                placeholder=\"Enter quiz name\"\r\n                mb={10}\r\n                width={{ base: 200, md: 300 }}\r\n              />\r\n              <Heading align=\"center\" fontSize=\"3xl\" fontWeight=\"bold\">\r\n                Questions\r\n              </Heading>\r\n            </Box>\r\n            {formValues.map((element, index) => (\r\n              <Box className=\"form-inline\" key={index} align=\"left\">\r\n                <Box>\r\n                  <Box mb={10}>\r\n                    <FormLabel>Question</FormLabel>\r\n                    <Input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"question\"\r\n                      width={{ base: 200, md: 300 }}\r\n                      value={element || \"\"}\r\n                      onChange={(e) => changeQuestionHandler(index, e)}\r\n                    />\r\n                  </Box>\r\n                  <RadioGroup\r\n                    name={`choice${index}`}\r\n                    value={`${correctAns[index]}`}\r\n                  >\r\n                    <Flex\r\n                      justifyContent={{ base: \"\", md: \"flex-start\" }}\r\n                      flexWrap={{ base: \"wrap\", md: \"nowrap\" }}\r\n                    >\r\n                      {Array(newChoices[index])\r\n                        .fill(1)\r\n                        .map((_, row) => (\r\n                          <Flex\r\n                            key={row}\r\n                            flexWrap=\"wrap\"\r\n                            flexDirection=\"column\"\r\n                            mb={{ base: 5, md: 0 }}\r\n                          >\r\n                            <FormLabel>{`Choice ${row + 1}`}</FormLabel>\r\n\r\n                            <Input\r\n                              required\r\n                              type=\"text\"\r\n                              name=\"choice\"\r\n                              value={choices[index][row]}\r\n                              onChange={(e) => updateChoices(index, row, e)}\r\n                              mr={4}\r\n                              mb={2}\r\n                              width={200}\r\n                            />\r\n                            <Radio\r\n                              isRequired\r\n                              value={`${row}`}\r\n                              onClick={(e) => updateCorrectAns(index, e)}\r\n                            >\r\n                              Correct answer\r\n                            </Radio>\r\n                          </Flex>\r\n                        ))}\r\n                    </Flex>\r\n                  </RadioGroup>\r\n                  <Flex justifyContent=\"space-between\" mt={5}>\r\n                    <Button\r\n                      colorScheme=\"blue\"\r\n                      w=\"full\"\r\n                      mr={6}\r\n                      className=\"button add\"\r\n                      type=\"button\"\r\n                      onClick={() => handleAddChoices(index)}\r\n                    >\r\n                      Add Choice\r\n                    </Button>\r\n                    <Button\r\n                      w=\"full\"\r\n                      mr={6}\r\n                      className=\"button add\"\r\n                      type=\"button\"\r\n                      onClick={() => handleRemoveChoices(index)}\r\n                    >\r\n                      Remove Choice\r\n                    </Button>\r\n                  </Flex>\r\n                </Box>\r\n                {index ? (\r\n                  <Button\r\n                    mt={30}\r\n                    type=\"button\"\r\n                    className=\"button remove\"\r\n                    onClick={() => removeFormFields(index)}\r\n                  >\r\n                    Remove Question\r\n                  </Button>\r\n                ) : null}\r\n                <Divider colorScheme=\"blue\" my={45} />\r\n              </Box>\r\n            ))}\r\n            <Box align=\"center\">\r\n              <Button\r\n                mr={6}\r\n                className=\"button add\"\r\n                type=\"button\"\r\n                onClick={addFormFields}\r\n              >\r\n                Add question\r\n              </Button>\r\n              <Button\r\n                className=\"button submit\"\r\n                type=\"submit\"\r\n                colorScheme=\"blue\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Box>\r\n          </form>\r\n        </FormControl>\r\n      </Box>\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default CreateQuiz;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth } from \"./stores/auth-context\";\r\n\r\nexport function PrivateModRoute({ component: Component, ...rest }) {\r\n  const { currentUser, roles } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        return (roles[0].isMod || roles[0].isAdmin) && currentUser ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/Quiz/\" />\r\n        );\r\n      }}\r\n    ></Route>\r\n  );\r\n}\r\n\r\nexport function PrivateRoute({ component: Component, ...rest }) {\r\n  const { currentUser, roles } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        return roles[0].isAdmin && currentUser ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/Quiz/\" />\r\n        );\r\n      }}\r\n    ></Route>\r\n  );\r\n}\r\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport Main from \"./components/Main\";\nimport Auth from \"./components/Auth\";\nimport { CSSReset } from \"@chakra-ui/css-reset\";\nimport { AuthContextProvider } from \"./stores/auth-context\";\nimport Header from \"./components/NavBar/Navigation\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport Quiz from \"./components/Quiz/Quiz\";\nimport Users from \"./components/Users\";\nimport CreateQuiz from \"./components/Quiz/CreateQuiz\";\nimport { QuizContextProvider } from \"./stores/quiz-context\";\nimport { PrivateRoute, PrivateModRoute } from \"./PrivateRoute\";\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <AuthContextProvider>\n        <QuizContextProvider>\n          <CSSReset />\n          <Header />\n          <Switch>\n            <Route path=\"/Quiz/\" exact component={Main} />\n            <Route path=\"/Quiz/auth\" component={Auth} />\n            <PrivateModRoute path=\"/Quiz/create-quiz\" component={CreateQuiz} />\n            <PrivateModRoute\n              path=\"/Quiz/edit-quiz/:IdQuiz\"\n              component={CreateQuiz}\n            />\n            <PrivateRoute path=\"/Quiz/users\" component={Users} />\n\n            <Route path=\"/Quiz/quiz/:quizId\" component={Quiz} />\n            <Route path=\"*\">\n              <Redirect to=\"/Quiz/\" />\n            </Route>\n          </Switch>\n        </QuizContextProvider>\n      </AuthContextProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}