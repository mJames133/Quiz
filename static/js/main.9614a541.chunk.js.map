{"version":3,"sources":["components/firebase.js","stores/auth-context.js","components/Main.js","components/Auth.js","components/NavBar/Navigation.js","components/Quiz/Score.js","components/Quiz/Quiz.js","components/Users.js","components/Quiz/CreateQuiz.js","PrivateRoute.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","db","firestore","realdatabase","database","AuthContext","createContext","useAuth","useContext","AuthContextProvider","props","useState","currentUser","setCurrentUser","isAdmin","isMod","roles","setRoles","loading","setLoading","error","setError","history","useHistory","signUp","email","password","firstName","lastName","passwordConfirm","a","length","createUserWithEmailAndPassword","then","newUser","collection","doc","uid","set","userInfo","user","catch","useEffect","onAuthStateChanged","replace","get","response","data","contextValue","login","signInWithEmailAndPassword","logout","signOut","Provider","value","children","Main","quizs","setQuizs","toast","useToast","ref","on","querySnapshot","val","Object","values","pt","spacing","pb","map","quiz","row","display","justifyContent","borderRadius","borderWidth","bg","p","w","base","md","h","align","fontSize","name","size","height","width","color","_hover","onClick","push","position","title","description","status","duration","isClosable","playQuizHandler","Auth","isLogin","setIsLogin","isLoading","setIsLoading","emailInputRef","useRef","firstNameInputRef","lastNameInputRef","passwordInputRef","passwordConfirmInputRef","maxWidth","px","textAlign","my","onSubmit","event","preventDefault","enteredEmail","current","enteredPassword","enteredLastName","enteredFirstName","enteredConfirmPassword","htmlFor","id","type","placeholder","required","disabled","colorScheme","prevState","MenuItem","islast","to","mb","sm","mr","fontWeight","Header","show","setShow","as","maxW","justify","wrap","Close","Hamburger","flexBasis","direction","style","textDecoration","e","Chart","pluginService","register","beforeDraw","chart","config","options","elements","center","ctx","centerConfig","fontStyle","txt","text","maxFontSize","sidePaddingCalculated","sidePadding","innerRadius","font","stringWidth","measureText","elementWidth","widthRatio","newFontSize","Math","floor","elementHeight","fontSizeToUse","min","minFontSize","lineHeight","wrapText","undefined","textBaseline","centerX","chartArea","left","right","centerY","top","bottom","fillStyle","fillText","words","split","line","lines","n","testLine","Score","scoree","score","total","datasets","backgroundColor","boxShadow","overflow","rounded","textTransform","py","legend","toFixed","tooltips","enabled","Quiz","questions","setQuestions","currentQuest","setCurrentQuest","showScore","setShowScore","setScore","quizNameKey","setQuizNameKey","params","useParams","currentPage","quizId","tempData","getOwnPropertyNames","flexDirection","question","answers","isCorrect","snapshot","child","pl","Users","users","setUsers","forEach","overflowX","variant","onChange","userData","newValue","target","update","selectInputHandler","defaultValue","role","CreateQuiz","nameRef","newChoices","setNewChoices","choices","setChoices","correctAns","setCorrectAns","formValues","setFormValues","QuestionList","questionList","i","j","String","fromCharCode","toUpperCase","enteredName","element","index","className","newFormValues","changeQuestionHandler","flexWrap","Array","fill","_","newArr","updateChoices","isRequired","correctAnswers","updateCorrectAns","tempChoices","handleAddChoices","handleRemoveChoices","mt","choiceValues","splice","slice","prevstate","removeFormFields","PrivateModRoute","Component","component","rest","render","PrivateRoute","App","path","exact","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9614a541.chunk.js","sourcesContent":["import firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/auth\";\r\nimport \"firebase/compat/firestore\";\r\nimport \"firebase/compat/database\";\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: \"AIzaSyAIUyXqlnq0_p7Dtoej_vx1nQvWS-qUcU0\",\r\n  authDomain: \"react-69990.firebaseapp.com\",\r\n  databaseURL:\r\n    \"https://react-69990-default-rtdb.europe-west1.firebasedatabase.app\",\r\n  projectId: \"react-69990\",\r\n  storageBucket: \"react-69990.appspot.com\",\r\n  messagingSenderId: \"569670275960\",\r\n  appId: \"1:569670275960:web:872cb0c1b85921ca502e8d\",\r\n});\r\nexport const auth = firebase.auth();\r\nexport const db = app.firestore();\r\nexport const realdatabase = app.database();\r\n\r\nexport default app;\r\n","import { useState, useEffect, useContext, createContext } from \"react\";\r\nimport { auth, db } from \"../components/firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [roles, setRoles] = useState([{ isAdmin: false, isMod: false }]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const signUp = async (\r\n    email,\r\n    password,\r\n    firstName,\r\n    lastName,\r\n    passwordConfirm\r\n  ) => {\r\n    if (password.length < 6) {\r\n      return setError(\"Password should have at least 6 characters.\");\r\n    }\r\n    if (password !== passwordConfirm) {\r\n      return setError(\"Password doesnt match\");\r\n    }\r\n\r\n    auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((newUser) => {\r\n        const userRef = db.collection(\"users\").doc(auth.currentUser.uid);\r\n        userRef.set({\r\n          userInfo: {\r\n            firstName,\r\n            lastName,\r\n            email: email,\r\n            uid: newUser.user.uid,\r\n            roles,\r\n          },\r\n        });\r\n      })\r\n      .catch(() => setError(\"Email is already used!\"));\r\n  };\r\n\r\n  const login = (email, password) => {\r\n    auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .catch(() => setError(\"Authentication failed!\"));\r\n  };\r\n\r\n  const logout = () => {\r\n    return auth.signOut();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      setCurrentUser(user);\r\n\r\n      if (user) {\r\n        history.replace(\"/Quiz/\");\r\n\r\n        const userRef = db.collection(\"users\").doc(user.uid);\r\n        userRef.get().then((response) => {\r\n          setRoles(response.data().userInfo.roles);\r\n        });\r\n      }\r\n      setRoles([{ isAdmin: false, isMod: false }]);\r\n      setLoading(false);\r\n    });\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const contextValue = {\r\n    currentUser,\r\n    signUp,\r\n    login,\r\n    logout,\r\n    roles,\r\n    error,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {!loading && props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n","import {\r\n  HStack,\r\n  VStack,\r\n  Text,\r\n  Flex,\r\n  Button,\r\n  Heading,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { realdatabase } from \"./firebase\";\r\nimport { Alert } from \"@chakra-ui/alert\";\r\nimport { useAuth } from \"../stores/auth-context\";\r\n\r\nconst Main = () => {\r\n  const [quizs, setQuizs] = useState(null);\r\n  const { currentUser } = useAuth();\r\n  const history = useHistory();\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    realdatabase.ref(\"/list\").on(\"value\", (querySnapshot) => {\r\n      const data = querySnapshot.val() || null;\r\n      if (data) {\r\n        setQuizs(Object.values(data));\r\n      }\r\n    });\r\n  }, []);\r\n  const playQuizHandler = (row) => {\r\n    if (!currentUser) {\r\n      toast({\r\n        position: \"bottom-left\",\r\n        title: \"Error\",\r\n        description: \"You should be logged in to play quiz!\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        isClosable: false,\r\n      });\r\n      return;\r\n    }\r\n    history.push(`/Quiz/quiz/${row + 1}`);\r\n  };\r\n\r\n  return (\r\n    <VStack pt={6} spacing={4}>\r\n      <Heading pb={3}>Quizs</Heading>\r\n      {quizs !== null &&\r\n        quizs.map((quiz, row) => (\r\n          <HStack\r\n            key={row}\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            borderRadius={30}\r\n            borderWidth={1}\r\n            bg=\"gray.300\"\r\n          >\r\n            <Flex\r\n              p={4}\r\n              w={{ base: \"xs\", md: \"400px\" }}\r\n              h=\"70px\"\r\n              justifyContent=\"space-between\"\r\n              align=\"center\"\r\n            >\r\n              <Text fontSize={20}>{quiz.name}</Text>\r\n\r\n              <Button\r\n                size=\"md\"\r\n                height=\"48px\"\r\n                width=\"100px\"\r\n                borderRadius={15}\r\n                bg=\"gray.800\"\r\n                color=\"white\"\r\n                _hover={{ bg: \"gray.700\" }}\r\n                onClick={() => playQuizHandler(row)}\r\n              >\r\n                Play\r\n              </Button>\r\n            </Flex>\r\n          </HStack>\r\n        ))}\r\n      )\r\n    </VStack>\r\n  );\r\n};\r\nexport default Main;\r\n","import { useState, useRef } from \"react\";\r\nimport { Flex, Stack, Box, Heading, Link } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { Alert } from \"@chakra-ui/alert\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { useAuth } from \"../stores/auth-context\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction Auth() {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const emailInputRef = useRef();\r\n  const firstNameInputRef = useRef();\r\n  const lastNameInputRef = useRef();\r\n  const passwordInputRef = useRef();\r\n  const passwordConfirmInputRef = useRef();\r\n  const { signUp, login, error } = useAuth();\r\n\r\n  const authSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    const enteredEmail = emailInputRef.current.value;\r\n    const enteredPassword = passwordInputRef.current.value;\r\n    setIsLoading(true);\r\n\r\n    if (isLogin) {\r\n      login(enteredEmail, enteredPassword);\r\n    } else {\r\n      const enteredLastName = firstNameInputRef.current.value;\r\n      const enteredFirstName = lastNameInputRef.current.value;\r\n      const enteredConfirmPassword = passwordConfirmInputRef.current.value;\r\n\r\n      signUp(\r\n        enteredEmail,\r\n        enteredPassword,\r\n        enteredLastName,\r\n        enteredFirstName,\r\n        enteredConfirmPassword\r\n      );\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const authSwitchHandler = () => {\r\n    setIsLogin((prevState) => !prevState);\r\n    emailInputRef.current.value = \"\";\r\n    if (firstNameInputRef.current != null) firstNameInputRef.current.value = \"\";\r\n    if (lastNameInputRef.current != null) lastNameInputRef.current.value = \"\";\r\n    if (passwordConfirmInputRef.current != null)\r\n      passwordConfirmInputRef.current.value = \"\";\r\n    passwordInputRef.current.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      pt={{ base: 0, md: 12 }}\r\n      align=\"center\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Box\r\n        borderWidth={{ base: 0, md: 1 }}\r\n        width=\"full\"\r\n        maxWidth=\"500px\"\r\n        px={4}\r\n        textAlign=\"center\"\r\n        borderRadius={4}\r\n      >\r\n        <Box my={4}>\r\n          <form onSubmit={authSubmitHandler}>\r\n            {error && <Alert status=\"error\">{error}</Alert>}\r\n            <Heading>{isLogin ? \"Login\" : \"Register\"}</Heading>\r\n            <Box p={4}>\r\n              <FormControl>\r\n                {!isLogin && (\r\n                  <Box>\r\n                    <FormLabel pt={4} htmlFor=\"email\">\r\n                      First name\r\n                    </FormLabel>\r\n                    <Input\r\n                      id=\"first-name\"\r\n                      type=\"text\"\r\n                      ref={firstNameInputRef}\r\n                      placeholder=\"Enter your first name\"\r\n                      required\r\n                    />\r\n                    <FormLabel pt={4} htmlFor=\"email\">\r\n                      Last name\r\n                    </FormLabel>\r\n                    <Input\r\n                      id=\"Last-name\"\r\n                      type=\"text\"\r\n                      ref={lastNameInputRef}\r\n                      placeholder=\"Enter your last name\"\r\n                      required\r\n                    />\r\n                  </Box>\r\n                )}\r\n                <FormLabel pt={4} htmlFor=\"email\">\r\n                  Email address\r\n                </FormLabel>\r\n                <Input\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  ref={emailInputRef}\r\n                  placeholder=\"Enter your email address\"\r\n                  required\r\n                />\r\n                <FormLabel htmlFor=\"password\" pt={4}>\r\n                  Password\r\n                </FormLabel>\r\n                <Input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  ref={passwordInputRef}\r\n                  placeholder=\"Enter your password\"\r\n                  required\r\n                />\r\n                {!isLogin && (\r\n                  <Box>\r\n                    <FormLabel htmlFor=\"password\" pt={4}>\r\n                      Confirm Password\r\n                    </FormLabel>\r\n                    <Input\r\n                      id=\"ConfirmPassword\"\r\n                      type=\"password\"\r\n                      ref={passwordConfirmInputRef}\r\n                      placeholder=\"Confirm your password\"\r\n                      required\r\n                    />\r\n                  </Box>\r\n                )}\r\n              </FormControl>\r\n            </Box>\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={isLoading}\r\n              width=\"full\"\r\n              colorScheme=\"blue\"\r\n            >\r\n              {isLoading\r\n                ? \"Sending request...\"\r\n                : isLogin\r\n                ? \"Sign In\"\r\n                : \"Sign Up\"}\r\n            </Button>\r\n            <Stack pt={2}>\r\n              <Link onClick={authSwitchHandler}>\r\n                {isLogin\r\n                  ? \"Create new account\"\r\n                  : \"Login with an existing account\"}\r\n              </Link>\r\n            </Stack>\r\n          </form>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n","import { useState, useContext } from \"react\";\r\nimport { Container, Flex, Box, Text, Link as LinkText } from \"@chakra-ui/react\";\r\nimport { CloseIcon, HamburgerIcon } from \"@chakra-ui/icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../../stores/auth-context\";\r\n\r\nconst MenuItem = ({ children, islast, to = \"/\" }) => {\r\n  return (\r\n    <Text\r\n      mb={{ base: islast ? 0 : 8, sm: 0 }}\r\n      mr={{ base: 0, sm: islast ? 0 : 8 }}\r\n      display=\"block\"\r\n      fontSize=\"lg\"\r\n      fontWeight=\"bold\"\r\n    >\r\n      <Link to={to}>{children}</Link>\r\n    </Text>\r\n  );\r\n};\r\n\r\nconst Header = (props) => {\r\n  const { currentUser, logout, roles } = useAuth();\r\n  const [show, setShow] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const handleLogout = (e) => {\r\n    e.preventDefault();\r\n    logout();\r\n    history.push(\"/Quiz/\");\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      as=\"nav\"\r\n      mb={4}\r\n      p={4}\r\n      bg={\"blue.500\"}\r\n      color={\"white\"}\r\n      position=\"sticky\"\r\n    >\r\n      <Container maxW=\"container.lg\">\r\n        <Flex justify=\"space-between\" align=\"center\" wrap=\"wrap\" {...props}>\r\n          <Box>\r\n            <Text fontSize=\"2xl\" fontWeight=\"bold\">\r\n              <Link to=\"/Quiz/\">Quiz</Link>\r\n            </Text>\r\n          </Box>\r\n\r\n          <Box\r\n            display={{ base: \"block\", md: \"none\" }}\r\n            onClick={() => setShow(!show)}\r\n          >\r\n            {show ? <CloseIcon /> : <HamburgerIcon />}\r\n          </Box>\r\n\r\n          <Box\r\n            display={{ base: show ? \"block\" : \"none\", md: \"block\" }}\r\n            flexBasis={{ base: \"100%\", md: \"auto\" }}\r\n          >\r\n            <Flex\r\n              align=\"center\"\r\n              justify={[\"center\", \"space-between\"]}\r\n              direction={[\"column\", \"row\"]}\r\n            >\r\n              {currentUser && roles[0].isAdmin && (\r\n                <MenuItem to=\"/Quiz/users\">Users</MenuItem>\r\n              )}\r\n              {currentUser && (roles[0].isMod || roles[0].isAdmin) && (\r\n                <MenuItem to=\"/Quiz/create-quiz\">Create Quiz</MenuItem>\r\n              )}\r\n              {currentUser ? (\r\n                <LinkText\r\n                  style={{ textDecoration: \"none\" }}\r\n                  fontSize=\"lg\"\r\n                  fontWeight=\"bold\"\r\n                  islast=\"true\"\r\n                  onClick={handleLogout}\r\n                >\r\n                  Logout\r\n                </LinkText>\r\n              ) : (\r\n                <MenuItem to=\"/Quiz/auth\" islast=\"true\">\r\n                  Sign In\r\n                </MenuItem>\r\n              )}\r\n            </Flex>\r\n          </Box>\r\n        </Flex>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Box, Text } from \"@chakra-ui/layout\";\r\nimport { Chart, Doughnut } from \"react-chartjs-2\";\r\nChart.pluginService.register({\r\n  beforeDraw: function (chart) {\r\n    if (chart.config.options.elements.center) {\r\n      // Get ctx from string\r\n      var ctx = chart.chart.ctx;\r\n\r\n      // Get options from the center object in options\r\n      var centerConfig = chart.config.options.elements.center;\r\n      var fontStyle = centerConfig.fontStyle || \"Arial\";\r\n      var txt = centerConfig.text;\r\n      var color = centerConfig.color || \"#000\";\r\n      var maxFontSize = centerConfig.maxFontSize || 75;\r\n      var sidePadding = centerConfig.sidePadding || 20;\r\n      var sidePaddingCalculated = (sidePadding / 100) * (chart.innerRadius * 2);\r\n      // Start with a base font of 30px\r\n      ctx.font = \"30px \" + fontStyle;\r\n\r\n      // Get the width of the string and also the width of the element minus 10 to give it 5px side padding\r\n      var stringWidth = ctx.measureText(txt).width;\r\n      var elementWidth = chart.innerRadius * 2 - sidePaddingCalculated;\r\n\r\n      // Find out how much the font can grow in width.\r\n      var widthRatio = elementWidth / stringWidth;\r\n      var newFontSize = Math.floor(30 * widthRatio);\r\n      var elementHeight = chart.innerRadius * 2;\r\n\r\n      // Pick a new font size so it will not be larger than the height of label.\r\n      var fontSizeToUse = Math.min(newFontSize, elementHeight, maxFontSize);\r\n      var minFontSize = centerConfig.minFontSize;\r\n      var lineHeight = centerConfig.lineHeight || 25;\r\n      var wrapText = false;\r\n\r\n      if (minFontSize === undefined) {\r\n        minFontSize = 20;\r\n      }\r\n\r\n      if (minFontSize && fontSizeToUse < minFontSize) {\r\n        fontSizeToUse = minFontSize;\r\n        wrapText = true;\r\n      }\r\n\r\n      // Set font settings to draw it correctly.\r\n      ctx.textAlign = \"center\";\r\n      ctx.textBaseline = \"middle\";\r\n      var centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\r\n      var centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\r\n      ctx.font = fontSizeToUse + \"px \" + fontStyle;\r\n      ctx.fillStyle = color;\r\n\r\n      if (!wrapText) {\r\n        ctx.fillText(txt, centerX, centerY);\r\n        return;\r\n      }\r\n\r\n      var words = txt.split(\" \");\r\n      var line = \"\";\r\n      var lines = [];\r\n\r\n      // Break words up into multiple lines if necessary\r\n      for (var n = 0; n < words.length; n++) {\r\n        var testLine = line + words[n] + \" \";\r\n        var metrics = ctx.measureText(testLine);\r\n        var testWidth = metrics.width;\r\n        if (testWidth > elementWidth && n > 0) {\r\n          lines.push(line);\r\n          line = words[n] + \" \";\r\n        } else {\r\n          line = testLine;\r\n        }\r\n      }\r\n\r\n      // Move the center up depending on line height and number of lines\r\n      centerY -= (lines.length / 2) * lineHeight;\r\n\r\n      for (var n = 0; n < lines.length; n++) {\r\n        ctx.fillText(lines[n], centerX, centerY);\r\n        centerY += lineHeight;\r\n      }\r\n      //Draw text in center\r\n      ctx.fillText(line, centerX, centerY);\r\n    }\r\n  },\r\n});\r\n\r\nconst Score = (props) => {\r\n  const scoree = (props.score / props.total) * 100;\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [scoree, 100 - scoree],\r\n        backgroundColor: [\"#0087c5\", \"#cde0f1\"],\r\n        borderWidth: 0.5,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      maxW={{ base: \"xs\", md: \"500px\" }}\r\n      w=\"full\"\r\n      bg=\"blue.500\"\r\n      pb={8}\r\n      boxShadow={\"2xl\"}\r\n      overflow={\"hidden\"}\r\n      rounded={\"md\"}\r\n    >\r\n      <Box bg=\"gray.800\">\r\n        <Text\r\n          color=\"white\"\r\n          textAlign=\"center\"\r\n          textTransform=\"uppercase\"\r\n          fontSize=\"20\"\r\n          py={3}\r\n        >\r\n          {`Score: ${props.score} / ${props.total}`}\r\n        </Text>\r\n      </Box>\r\n      <Box py={4}>\r\n        <Doughnut\r\n          data={data}\r\n          width={300}\r\n          height={200}\r\n          options={{\r\n            legend: {\r\n              display: false,\r\n            },\r\n            elements: {\r\n              center: {\r\n                text: `${(props.score / props.total).toFixed(2) * 100}%`,\r\n                color: \"white\",\r\n              },\r\n            },\r\n\r\n            tooltips: {\r\n              enabled: false,\r\n            },\r\n          }}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import { Box, Center, Flex, Text, Button, VStack } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { realdatabase, db } from \"../firebase\";\r\nimport { useAuth } from \"../../stores/auth-context\";\r\nimport Score from \"./Score\";\r\n\r\nconst Quiz = () => {\r\n  const [questions, setQuestions] = useState(null);\r\n  const [currentQuest, setCurrentQuest] = useState(0);\r\n  const [showScore, setShowScore] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [quizNameKey, setQuizNameKey] = useState(null);\r\n  const [userData, setUserData] = useState(null);\r\n  const params = useParams();\r\n  const { currentUser } = useAuth();\r\n\r\n  const currentPage = params.quizId - 1;\r\n\r\n  useEffect(() => {\r\n    realdatabase.ref(\"/list\").on(\"value\", (querySnapshot) => {\r\n      const data = querySnapshot.val() || null;\r\n      if (data) {\r\n        const tempData = Object.values(data);\r\n        setQuestions(tempData[currentPage]);\r\n        setQuizNameKey(Object.getOwnPropertyNames(data)[currentPage]);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const answerHandler = (correctAnswer) => {\r\n    if (correctAnswer) {\r\n      setScore(score + 1);\r\n    }\r\n    if (currentQuest + 1 < questions.questions.length) {\r\n      setCurrentQuest(currentQuest + 1);\r\n    } else {\r\n      setShowScore(true);\r\n\r\n      db.collection(\"users\")\r\n        .doc(currentUser.uid)\r\n        .get()\r\n        .then((snapshot) => {\r\n          const data = snapshot.data().userInfo;\r\n\r\n          realdatabase\r\n            .ref()\r\n            .child(\"/list/\")\r\n            .child(quizNameKey)\r\n            .child(\"users\")\r\n            .child(currentUser.uid)\r\n            .set({\r\n              firstName: data.firstName,\r\n              lastName: data.lastName,\r\n              email: data.email,\r\n              score,\r\n            });\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {questions !== null && (\r\n        <Center py={9} flexDirection=\"column\">\r\n          <Text textAlign=\"center\" fontSize=\"25\" fontWeight={\"bold\"} py={4}>\r\n            {showScore\r\n              ? \"Quiz Results\"\r\n              : `Question ${currentQuest + 1} of ${questions.questions.length}`}\r\n          </Text>\r\n          {!showScore && (\r\n            <Box\r\n              maxW={{ base: \"xs\", md: \"500px\" }}\r\n              w=\"full\"\r\n              bg=\"blue.500\"\r\n              pb={8}\r\n              boxShadow={\"2xl\"}\r\n              overflow={\"hidden\"}\r\n              rounded={\"md\"}\r\n            >\r\n              <Box bg=\"gray.800\">\r\n                <Text\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  textTransform=\"uppercase\"\r\n                  fontSize=\"20\"\r\n                  py={3}\r\n                  px={10}\r\n                >\r\n                  {questions.questions[currentQuest].question}\r\n                </Text>\r\n              </Box>\r\n              <VStack spacing={4} pt={8}>\r\n                {questions.questions[currentQuest].answers.map((data, row) => (\r\n                  <Button\r\n                    key={row}\r\n                    borderRadius={15}\r\n                    height={45}\r\n                    value={data.isCorrect}\r\n                    onClick={() => answerHandler(data.isCorrect)}\r\n                  >\r\n                    <Flex\r\n                      p={4}\r\n                      align=\"center\"\r\n                      w={{ base: \"200px\", md: \"400px\" }}\r\n                    >\r\n                      <Text fontSize={28} px={2} fontWeight=\"bold\">\r\n                        {data.id}\r\n                      </Text>\r\n                      <Text pl={4} fontSize={20}>\r\n                        {data.name}\r\n                      </Text>\r\n                    </Flex>\r\n                  </Button>\r\n                ))}\r\n              </VStack>\r\n            </Box>\r\n          )}\r\n          {showScore && (\r\n            <Score score={score} total={questions.questions.length} />\r\n          )}\r\n        </Center>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Select,\r\n  Container,\r\n} from \"@chakra-ui/react\";\r\nimport { db } from \"./firebase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"../stores/auth-context\";\r\n\r\nconst Users = () => {\r\n  const { currentUser } = useAuth();\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\")\r\n      .get()\r\n      .then(function (snapshot) {\r\n        snapshot.forEach(function (doc) {\r\n          setUsers((prevState) => [...prevState, doc.data().userInfo]);\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const selectRoleValue = (role) => {\r\n    return role.isAdmin ? \"admin\" : role.isMod ? \"mod\" : \"user\";\r\n  };\r\n\r\n  const selectInputHandler = (event, row) => {\r\n    let userData = [...users];\r\n\r\n    const newValue = event.target.value;\r\n    if (newValue === \"mod\") {\r\n      userData[row].roles[0].isAdmin = false;\r\n      userData[row].roles[0].isMod = true;\r\n    }\r\n    if (newValue === \"admin\") {\r\n      userData[row].roles[0].isAdmin = true;\r\n      userData[row].roles[0].isMod = false;\r\n    }\r\n    if (newValue === \"user\") {\r\n      userData[row].roles[0].isAdmin = false;\r\n      userData[row].roles[0].isMod = false;\r\n    }\r\n    setUsers(userData);\r\n\r\n    const userInfo = userData[row];\r\n    const userRef = db.collection(\"users\").doc(userData[row].uid);\r\n    userRef.update({\r\n      userInfo,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container overflowX=\"auto\">\r\n      <Table variant=\"simple\" w=\"xs\">\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Name</Th>\r\n            <Th>Email</Th>\r\n            <Th>Role</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {users !== null &&\r\n            users.map((quiz, row) => (\r\n              <Tr key={row}>\r\n                <Td>{`${quiz.firstName + \" \" + quiz.lastName}`}</Td>\r\n                <Td>{`${quiz.email}`}</Td>\r\n\r\n                <Td w=\"full\">\r\n                  <Select\r\n                    disabled={quiz.uid === currentUser.uid}\r\n                    width={170}\r\n                    onChange={(e) => selectInputHandler(e, row)}\r\n                    defaultValue={selectRoleValue(quiz.roles[0])}\r\n                  >\r\n                    <option value=\"admin\">Administrator</option>\r\n                    <option value=\"mod\">Moderator</option>\r\n                    <option value=\"user\">User</option>\r\n                  </Select>\r\n                </Td>\r\n              </Tr>\r\n            ))}\r\n        </Tbody>\r\n      </Table>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import {\r\n  Center,\r\n  FormControl,\r\n  Input,\r\n  Heading,\r\n  FormLabel,\r\n  Box,\r\n  Button,\r\n  RadioGroup,\r\n  Radio,\r\n  useToast,\r\n  Flex,\r\n} from \"@chakra-ui/react\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { realdatabase } from \"../firebase\";\r\n\r\nconst CreateQuiz = () => {\r\n  const nameRef = useRef(\"\");\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const [newChoices, setNewChoices] = useState([4]);\r\n  const [choices, setChoices] = useState([[]]);\r\n  const [questions, setQuestions] = useState(1);\r\n  const [correctAns, setCorrectAns] = useState([]);\r\n  const [formValues, setFormValues] = useState([{}]);\r\n\r\n  const changeQuestionHandler = (i, e) => {\r\n    let newFormValues = [...formValues];\r\n    newFormValues[i][e.target.name] = e.target.value;\r\n    setFormValues(newFormValues);\r\n  };\r\n\r\n  const updateChoices = (index, row, e) => {\r\n    let newArr = [...choices];\r\n    newArr[index][row] = e.target.value;\r\n    setChoices(newArr);\r\n  };\r\n  const addFormFields = () => {\r\n    setFormValues([...formValues, []]);\r\n    setChoices([...choices, []]);\r\n    setNewChoices([...newChoices, 4]);\r\n    setCorrectAns([...correctAns, 1]);\r\n    setQuestions((prevstate) => (prevstate += 1));\r\n  };\r\n\r\n  const removeFormFields = (i) => {\r\n    let newFormValues = [...formValues];\r\n    let choiceValues = [...choices];\r\n\r\n    newFormValues.splice(i, 1);\r\n    choiceValues.splice(i, 1);\r\n\r\n    setFormValues(newFormValues);\r\n    setChoices(choiceValues);\r\n    setNewChoices((prevState) => prevState.slice(0, -1));\r\n    setCorrectAns((prevState) => prevState.slice(0, -1));\r\n    setQuestions((prevstate) => (prevstate -= 1));\r\n  };\r\n\r\n  const QuestionList = () => {\r\n    let questionList = [];\r\n    for (let i = 0; i < +questions; i++) {\r\n      let answers = [];\r\n      for (let j = 0; j < newChoices[i]; j++) {\r\n        answers.push({\r\n          id: String.fromCharCode(97 + j).toUpperCase(),\r\n          name: choices[i][j],\r\n          isCorrect: correctAns[i] == j ? true : false,\r\n        });\r\n      }\r\n\r\n      questionList.push({\r\n        question: formValues[i].question,\r\n        answers,\r\n      });\r\n    }\r\n    return questionList;\r\n  };\r\n\r\n  const handleAddChoices = (row) => {\r\n    if (newChoices[row] < 5) {\r\n      let tempChoices = [...newChoices];\r\n      tempChoices[row]++;\r\n      setNewChoices(tempChoices);\r\n    }\r\n  };\r\n  const handleRemoveChoices = (row) => {\r\n    if (newChoices[row] > 2) {\r\n      let tempChoices = [...newChoices];\r\n      tempChoices[row]--;\r\n      setNewChoices(tempChoices);\r\n    }\r\n  };\r\n\r\n  const updateCorrectAns = (i, e) => {\r\n    let correctAnswers = [...correctAns];\r\n    correctAnswers[i] = e.target.value;\r\n    setCorrectAns(correctAnswers);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const enteredName = nameRef.current.value;\r\n\r\n    QuestionList();\r\n    realdatabase.ref().child(\"/list\").push({\r\n      name: enteredName,\r\n      questions: QuestionList(),\r\n    });\r\n    toast({\r\n      position: \"bottom-left\",\r\n      title: \"Quiz created\",\r\n      description: \"Quiz was succesfully created.\",\r\n      status: \"success\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n    });\r\n    history.replace(\"/Quiz/\");\r\n  };\r\n\r\n  return (\r\n    <Center align=\"center\" py={9} flexDirection=\"column\">\r\n      <Heading>Create Quiz</Heading>\r\n      <Box width={{ base: \"xs\", md: \"4xl\" }}>\r\n        <FormControl align=\"left\">\r\n          <form onSubmit={handleSubmit}>\r\n            <FormLabel htmlFor=\"name\" id=\"name\">\r\n              Quiz Name\r\n            </FormLabel>\r\n            <Box>\r\n              <Input\r\n                required\r\n                ref={nameRef}\r\n                id=\"name\"\r\n                type=\"text\"\r\n                placeholder=\"Enter quiz name\"\r\n                mb={10}\r\n                width={{ base: 200, md: 300 }}\r\n              />\r\n              <Heading align=\"center\" fontSize=\"3xl\" fontWeight=\"bold\">\r\n                Questions\r\n              </Heading>\r\n            </Box>\r\n            {formValues.map((element, index) => (\r\n              <Box pb={20} className=\"form-inline\" key={index} align=\"left\">\r\n                <Box>\r\n                  <Box mb={10}>\r\n                    <FormLabel>Question</FormLabel>\r\n                    <Input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"question\"\r\n                      width={{ base: 200, md: 300 }}\r\n                      value={element.question || \"\"}\r\n                      onChange={(e) => changeQuestionHandler(index, e)}\r\n                    />\r\n                  </Box>\r\n\r\n                  <RadioGroup name={`choice${index}`}>\r\n                    <Flex\r\n                      justifyContent={{ base: \"\", md: \"flex-start\" }}\r\n                      flexWrap={{ base: \"wrap\", md: \"nowrap\" }}\r\n                    >\r\n                      {Array(newChoices[index])\r\n                        .fill(1)\r\n                        .map((_, row) => (\r\n                          <Flex\r\n                            key={row}\r\n                            flexWrap=\"wrap\"\r\n                            flexDirection=\"column\"\r\n                            mb={{ base: 5, md: 0 }}\r\n                          >\r\n                            <FormLabel>{`Choice ${row + 1}`}</FormLabel>\r\n\r\n                            <Input\r\n                              required\r\n                              type=\"text\"\r\n                              name=\"choice\"\r\n                              value={choices[index][row]}\r\n                              onChange={(e) => updateChoices(index, row, e)}\r\n                              mr={4}\r\n                              width={200}\r\n                            />\r\n                            <Radio\r\n                              isRequired\r\n                              value={`${row}`}\r\n                              onClick={(e) => updateCorrectAns(index, e)}\r\n                            >\r\n                              Correct answer\r\n                            </Radio>\r\n                          </Flex>\r\n                        ))}\r\n                    </Flex>\r\n                  </RadioGroup>\r\n\r\n                  <Button\r\n                    mr={6}\r\n                    className=\"button add\"\r\n                    type=\"button\"\r\n                    onClick={() => handleAddChoices(index)}\r\n                  >\r\n                    Add Choice\r\n                  </Button>\r\n                  <Button\r\n                    mr={6}\r\n                    className=\"button add\"\r\n                    type=\"button\"\r\n                    onClick={() => handleRemoveChoices(index)}\r\n                  >\r\n                    Remove Choice\r\n                  </Button>\r\n                </Box>\r\n                {index ? (\r\n                  <Button\r\n                    mt={30}\r\n                    type=\"button\"\r\n                    className=\"button remove\"\r\n                    onClick={() => removeFormFields(index)}\r\n                  >\r\n                    Remove\r\n                  </Button>\r\n                ) : null}\r\n              </Box>\r\n            ))}\r\n            <Box align=\"center\">\r\n              <Button\r\n                mr={6}\r\n                className=\"button add\"\r\n                type=\"button\"\r\n                onClick={addFormFields}\r\n              >\r\n                Add question\r\n              </Button>\r\n              <Button className=\"button submit\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Box>\r\n          </form>\r\n        </FormControl>\r\n      </Box>\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default CreateQuiz;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth } from \"./stores/auth-context\";\r\n\r\nexport function PrivateModRoute({ component: Component, ...rest }) {\r\n  const { currentUser, roles } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        return (roles[0].isMod || roles[0].isAdmin) && currentUser ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/Quiz/\" />\r\n        );\r\n      }}\r\n    ></Route>\r\n  );\r\n}\r\n\r\nexport function PrivateRoute({ component: Component, ...rest }) {\r\n  const { currentUser, roles } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        return roles[0].isAdmin && currentUser ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/Quiz/\" />\r\n        );\r\n      }}\r\n    ></Route>\r\n  );\r\n}\r\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport Main from \"./components/Main\";\nimport Auth from \"./components/Auth\";\nimport { CSSReset } from \"@chakra-ui/css-reset\";\nimport { AuthContextProvider } from \"./stores/auth-context\";\nimport Header from \"./components/NavBar/Navigation\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport Quiz from \"./components/Quiz/Quiz\";\nimport Users from \"./components/Users\";\nimport CreateQuiz from \"./components/Quiz/CreateQuiz\";\nimport { PrivateRoute, PrivateModRoute } from \"./PrivateRoute\";\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <AuthContextProvider>\n        <CSSReset />\n        <Header />\n        <Switch>\n          <Route path=\"/Quiz/\" exact component={Main} />\n          <Route path=\"/Quiz/auth\" component={Auth} />\n          <PrivateModRoute path=\"/Quiz/create-quiz\" component={CreateQuiz} />\n          <PrivateRoute path=\"/Quiz/users\" component={Users} />\n\n          <Route path=\"/Quiz/quiz/:quizId\" component={Quiz} />\n          <Route path=\"*\">\n            <Redirect to=\"/Quiz/\" />\n          </Route>\n        </Switch>\n      </AuthContextProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}