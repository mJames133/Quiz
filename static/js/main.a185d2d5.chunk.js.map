{"version":3,"sources":["components/firebase.ts","stores/auth-context.tsx","stores/quiz-context.tsx","components/Main.tsx","components/Auth.tsx","components/NavBar/Navigation.tsx","components/Quiz/ChartScore.tsx","components/Quiz/Score.tsx","components/Quiz/Quiz.tsx","components/Users.tsx","components/Quiz/CreateQuiz.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","db","firestore","realdatabase","database","AuthContext","createContext","useAuth","useContext","AuthContextProvider","children","useState","currentUser","setCurrentUser","isAdmin","isMod","roles","setRoles","loading","setLoading","history","useHistory","signUp","email","password","firstName","lastName","a","createUserWithEmailAndPassword","then","newUser","collection","doc","user","uid","set","userInfo","useEffect","onAuthStateChanged","replace","get","response","data","contextValue","login","signInWithEmailAndPassword","logout","signOut","Provider","value","QuizContext","editQuiz","changeEditQuiz","useStore","QuizContextProvider","props","setEditQuiz","state","Main","quizs","setQuizs","quizID","setQuizID","openInfo","setOpenInfo","popInfo","setPopInfo","toast","useToast","renderData","ref","on","querySnapshot","val","Object","values","getOwnPropertyNames","SelectIconGroup","row","mr","colorScheme","icon","InfoOutline","onClick","quiz","prevState","snapshot","users","usersData","entries","tempUser","map","el","push","Edit","Delete","child","remove","isOpen","onClose","length","align","variant","score","pt","spacing","pb","display","borderRadius","borderWidth","bg","py","p","h","alignItems","fontSize","name","base","md","w","justifyContent","ArrowDown","size","height","width","color","_hover","position","title","description","status","duration","isClosable","playQuizHandler","Auth","isLogin","setIsLogin","isLoading","setIsLoading","useForm","register","handleSubmit","reset","setError","getValues","formState","errors","isSubmitting","maxWidth","px","textAlign","my","onSubmit","catch","type","message","confirmPassword","err","errorCode","code","isInvalid","Boolean","htmlFor","id","placeholder","required","minLength","Header","show","setShow","clickHandler","MenuItem","isLast","isCreate","to","mb","sm","fontWeight","as","maxW","justify","wrap","Close","Hamburger","flexBasis","direction","style","textDecoration","e","preventDefault","Chart","pluginService","beforeDraw","chart","options","centertext","ctx","restore","toFixed","font","textBaseline","fillStyle","text","textX","Math","round","measureText","textY","titleBlock","fillText","save","ChartScore","scoree","totalScore","datasets","backgroundColor","legend","tooltips","enabled","Score","boxShadow","overflow","rounded","textTransform","total","Quiz","questions","setQuestions","currentQuest","setCurrentQuest","showScore","setShowScore","quizNameKey","setQuizNameKey","selectedAns","setSelectedAns","setScore","quizId","useParams","currentPage","listener","tempData","off","flexDirection","event","tempScore","answers","element","index","isCorrect","question","bgColor","correctAnswers","updateAnswer","isRequired","pl","Users","effectedUsers","setEffectedUsers","setUsers","usersInfo","forEach","overflowX","disabled","onChange","userData","effected","newValue","target","selectInputHandler","defaultValue","role","mt","CreateQuiz","IdQuiz","setName","newChoices","setNewChoices","choices","setChoices","correctAns","setCorrectAns","formValues","setFormValues","forms","choicess","newChoicess","newCorrect","i","choicesName","ansEl","j","QuestionList","questionList","String","fromCharCode","toUpperCase","once","dataName","update","className","newFormValues","changeQuestionHandler","flexWrap","Array","fill","_","newArr","updateChoices","updateCorrectAns","tempChoices","handleAddChoices","handleRemoveChoices","choiceValues","splice","slice","removeFormFields","PrivateModRoute","Component","component","rest","render","routeProps","PrivateRoute","App","path","exact","ReactDOM","document","getElementById"],"mappings":"iSAKMA,G,qBAAMC,IAASC,cAAc,CACjCC,OAAQ,0CACRC,WAAY,8BACZC,YACE,qEACFC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,+CAEIC,EAAOT,IAASS,OAChBC,EAAKX,EAAIY,YACTC,EAAeb,EAAIc,W,8BCX1BC,EAAcC,wBAAmB,MAEhC,SAASC,IACd,OAAOC,qBAAWH,GAGb,IAAMI,EAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9C,EAAsCC,mBAA+B,MAArE,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0BF,mBAAS,CAAC,CAAEG,SAAS,EAAOC,OAAO,KAA7D,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACMC,EAAUC,cAEVC,EAAM,uCAAG,WACbC,EACAC,EACAC,EACAC,GAJa,SAAAC,EAAA,+EAMN3B,EACJ4B,+BAA+BL,EAAOC,GACtCK,MAAK,SAACC,GACW7B,EAAG8B,WAAW,SAASC,IAAIF,EAAQG,KAAKC,KAChDC,IAAI,CACVC,SAAU,CACRX,YACAC,WACAH,MAAOA,EACPW,IAAKJ,EAAQG,KAAKC,IAClBlB,eAhBK,2CAAH,4DA8BZqB,qBAAU,WAeR,OAdoBrC,EAAKsC,oBAAmB,SAACL,IAC3CpB,EAAeoB,GAEXA,KACFb,EAAQmB,QAAQ,UAEAtC,EAAG8B,WAAW,SAASC,IAAIC,EAAKC,KACxCM,MAAMX,MAAK,SAACY,GAClBxB,EAASwB,EAASC,OAAON,SAASpB,WAGtCC,EAAS,CAAC,CAAEH,SAAS,EAAOC,OAAO,KACnCI,GAAW,QAGZ,IAGL,IAAMwB,EAAe,CACnB/B,cACAU,SACAsB,MA9Bc,SAACrB,EAAeC,GAC5B,OAAOxB,EAAK6C,2BAA2BtB,EAAOC,IA8BhDsB,OA3Be,WACb,OAAO9C,EAAK+C,WA2Bd/B,SAIA,OACE,cAACX,EAAY2C,SAAb,CAAsBC,MAAON,EAA7B,UACIzB,GAAWR,K,oCC7EbwC,EAAc5C,wBAGjB,CACD6C,UAAU,EACVC,eAAgB,eAGLC,EAAW,kBAAM7C,qBAAW0C,IAM5BI,EAAuC,SAACC,GACnD,MAAgC5C,oBAAS,GAAzC,mBAAOwC,EAAP,KAAiBK,EAAjB,KAMMb,EAGF,CACFQ,WACAC,eATqB,SAACK,GACtBD,EAAYC,KAWd,OACE,cAACP,EAAYF,SAAb,CAAsBC,MAAON,EAA7B,SACGY,EAAM7C,YCgNEgD,EAlMF,WACX,IAAQN,EAAmBC,IAAnBD,eACR,EAA0BzC,mBAAqB,IAA/C,mBAAOgD,EAAP,KAAcC,EAAd,KACA,EAA4BjD,mBAAwB,IAApD,mBAAOkD,EAAP,KAAeC,EAAf,KACA,EAAgCnD,oBAAS,GAAzC,mBAAOoD,EAAP,KAAiBC,EAAjB,KACA,EAA8BrD,mBAA0B,IAAxD,mBAAOsD,EAAP,KAAgBC,EAAhB,KACA,EAA+B3D,IAAvBK,EAAR,EAAQA,YAAaI,EAArB,EAAqBA,MACfI,EAAUC,cACV8C,EAAQC,cAERC,EAAa,WACLlE,EAAamE,IAAI,SACzBC,GAAG,SAAS,SAACC,GACf,IAAM9B,EAAO8B,EAAcC,OAAS,KAChC/B,GACFkB,EAASc,OAAOC,OAAOjC,IACvBoB,EAAUY,OAAOE,oBAAoBlC,KAErCkB,EAAS,QAKfvB,qBAAU,WACRgC,MACC,CAAClE,IAEJ,IAyCM0E,EAA6C,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACpD,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,GAAI,EACJ,aAAW,OACXC,YAAY,OACZC,KAAM,cAACC,EAAA,EAAD,IACNC,QAAS,kBAxBOC,EAwBcN,EAvBpCd,GAAY,SAACqB,GAAD,OAAgBA,UACvBtB,GACH5D,EAAamE,IAAI,SAAWT,EAAOuB,IAAOb,GAAG,SAAS,SAACe,GACrD,IAAM5C,EAAO4C,EAASb,MACtB,GAAI/B,GAAQA,EAAK6C,MAAO,CACtB,IAAMC,EAAYd,OAAOe,QAAQ/C,EAAK6C,OAClCG,EAAgB,GACpBF,EAAUG,KAAI,SAACC,GACbF,EAASG,KAAKD,EAAG,OAEnB1B,EAAWwB,QAXI,IAACN,KA0BlB,cAAC,IAAD,CACEL,GAAI,EACJ,aAAW,YACXC,YAAY,OACZC,KAAM,cAACa,EAAA,EAAD,IACNX,QAAS,kBApCQC,EAoCcN,EAnCrC1B,GAAe,QACfhC,EAAQmB,QAAR,0BAAmC6C,EAAO,IAFpB,IAACA,KAsCnB,cAAC,IAAD,CACEL,GAAI,EACJ,aAAW,cACXC,YAAY,OACZC,KAAM,cAACc,EAAA,EAAD,IACNZ,QAAS,kBAhDUC,EAgDcN,EA/CvC3E,EAAamE,IAAI,SAAS0B,MAAMnC,EAAOuB,IAAOa,cAC9C5B,IAFwB,IAACe,SAsD3B,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOc,OAAQnC,EAAUoC,QAAS,kBAAMnC,GAAY,IAApD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,yBACA,cAAC,IAAD,IACA,eAAC,IAAD,WACsB,IAAnBC,EAAQmC,QACP,cAAC,IAAD,CAAMC,MAAM,SAAZ,6BAEkB,IAAnBpC,EAAQmC,QACP,eAAC,IAAD,CAAOE,QAAQ,SAAf,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,cAAC,IAAD,yBAGJ,cAAC,IAAD,UACGrC,EAAQ0B,KAAI,SAACP,EAAgBN,GAAjB,OACX,eAAC,IAAD,WACE,cAAC,IAAD,oBAAQM,EAAK3D,UAAY,IAAM2D,EAAK1D,YACpC,cAAC,IAAD,oBAAQ0D,EAAKmB,WAFNzB,sBAYzB,eAAC,IAAD,CAAQ0B,GAAI,EAAGC,QAAS,EAAxB,UACE,cAAC,IAAD,CAASC,GAAI,EAAb,mBACW,OAAV/C,GACCA,EAAMgC,KAAI,SAACP,EAAMN,GAAP,OACR,cAAC,IAAD,CAEE6B,QAAQ,OACRC,aAAc,GACdC,YAAa,EACbC,GAAG,WACHC,GAAI,EANN,SAQE,eAAC,IAAD,CAAKC,EAAG,EAAGC,EAAE,OAAON,QAAQ,OAAOO,WAAW,SAA9C,UACE,cAAC,IAAD,CAAMC,SAAU,GAAIpC,GAAI,EAAxB,SACGK,EAAKgC,OAER,eAAC,IAAD,CAAKT,QAAQ,OAAOO,WAAW,SAA/B,WACIlG,EAAM,GAAGF,SAAWE,EAAM,GAAGD,QAC7B,eAAC,IAAD,WACE,cAAC,IAAD,CAAK4F,QAAS,CAAEU,KAAM,OAAQC,GAAI,QAAlC,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAgBC,EAAE,QAAlB,UACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAaC,eAAe,SAASb,QAAQ,OAA7C,SACE,cAAC9B,EAAD,CAAiBC,IAAKA,SAG1B,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,GAAI,EACJ,aAAW,UACXC,YAAY,OACZC,KAAM,cAACwC,EAAA,EAAD,aAKd,cAAC,IAAD,CAAKd,QAAS,CAAEU,KAAM,OAAQC,GAAI,QAAlC,SACE,cAACzC,EAAD,CAAiBC,IAAKA,SAI5B,cAAC,IAAD,CACEC,GAAI,EACJ2C,KAAK,KACLC,OAAO,OACPC,MAAM,OACNhB,aAAc,GACdE,GAAG,WACHe,MAAM,QACNC,OAAQ,CAAEhB,GAAI,YACd3B,QAAS,kBA1JH,SAACL,GAClBlE,EAWLQ,EAAQmB,QAAR,qBAA8BuC,EAAM,IAVlCX,EAAM,CACJ4D,SAAU,cACVC,MAAO,QACPC,YAAa,wCACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,IAkJeC,CAAgBvD,IATjC,yBArCCA,MALb,W,sECiESwD,MAvNf,WACE,MAA8B3H,oBAAS,GAAvC,mBAAO4H,EAAP,KAAgBC,EAAhB,KACA,EAAkC7H,oBAAS,GAA3C,mBAAO8H,EAAP,KAAkBC,EAAlB,KAEA,EAA0BnI,IAAlBe,EAAR,EAAQA,OAAQsB,EAAhB,EAAgBA,MAEhB,EAOI+F,cANFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MAEAC,GALF,EAIEC,UAJF,EAKED,UALF,IAMEE,UAAaC,EANf,EAMeA,OAAQC,EANvB,EAMuBA,aAoDvB,OACE,cAAC,IAAD,CACEvB,MAAM,OACNpB,GAAI,CAAEa,KAAM,EAAGC,GAAI,IACnBjB,MAAM,SACNmB,eAAe,SAJjB,SAME,cAAC,IAAD,CACEX,YAAa,CAAEQ,KAAM,EAAGC,GAAI,GAC5BM,MAAM,OACNwB,SAAS,QACTC,GAAI,EACJC,UAAU,SACV1C,aAAc,EANhB,SAQE,cAAC,IAAD,CAAK2C,GAAI,EAAT,SACE,uBAAMC,SAAUX,GAjEL,SAAClE,GAClB+D,GAAa,GAETH,EACF3F,EAAM+B,EAAOpD,MAAOoD,EAAOnD,UAAUiI,OAAM,kBACzCV,EAAS,OAAQ,CACfW,KAAM,OACNC,QAAS,oCAKVhF,EAAOnD,WAAamD,EAAOiF,iBAE5Bb,EAAS,kBAAmB,CAC1BW,KAAM,WACNC,QAAS,+BAIbrI,EACEqD,EAAOpD,MACPoD,EAAOnD,SACPmD,EAAOlD,UACPkD,EAAOjD,UACP+H,OAAM,SAACI,GACP,IAAMC,EAAYD,EAAIE,KACL,6BAAbD,GACFf,EAAS,QAAS,CAChBW,KAAM,QACNC,QAAS,6BAGI,sBAAbG,GACFf,EAAS,QAAS,CAChBW,KAAM,QACNC,QAAS,oCAKjBjB,GAAa,MAwBP,UACE,cAAC,IAAD,UAAUH,EAAU,QAAU,aAC9B,eAAC,IAAD,CAAKvB,EAAG,EAAR,WACIuB,GACA,eAAC,IAAD,WACE,eAAC,IAAD,CAAayB,UAAWC,QAAO,OAACf,QAAD,IAACA,OAAD,EAACA,EAAQzH,WAAxC,UACE,cAAC,IAAD,CAAW+E,GAAI,EAAG0D,QAAQ,YAA1B,wBAGA,cAAC,IAAD,aACEC,GAAG,YACHC,YAAY,yBACRxB,EAAS,YAAa,CACxByB,SAAU,mBACVC,UAAW,CACTrH,MAAO,EACP0G,QAAS,kCAIf,cAAC,IAAD,UACGT,EAAOzH,WAAayH,EAAOzH,UAAUkI,aAG1C,eAAC,IAAD,CAAaK,UAAWC,QAAO,OAACf,QAAD,IAACA,OAAD,EAACA,EAAQxH,UAAxC,UACE,cAAC,IAAD,CAAW8E,GAAI,EAAG0D,QAAQ,WAA1B,uBAGA,cAAC,IAAD,aACEC,GAAG,WACHC,YAAY,wBACRxB,EAAS,WAAY,CACvByB,SAAU,mBACVC,UAAW,CACTrH,MAAO,EACP0G,QAAS,kCAIf,cAAC,IAAD,UACGT,EAAOxH,UAAYwH,EAAOxH,SAASiI,gBAK5C,eAAC,IAAD,CAAaK,UAAWC,SAAc,OAANf,QAAM,IAANA,OAAA,EAAAA,EAAQ3H,SAAR,OAAiB2H,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAQlJ,OAAzD,UACE,cAAC,IAAD,CAAWwG,GAAI,EAAG0D,QAAQ,QAA1B,2BAGA,cAAC,IAAD,aACEC,GAAG,QACHC,YAAY,4BACRxB,EAAS,QAAS,CACpByB,SAAU,mBACVC,UAAW,CACTrH,MAAO,EACP0G,QAAS,kCAIf,eAAC,IAAD,WACGT,EAAO3H,OAAS2H,EAAO3H,MAAMoI,QAC7BT,EAAOlJ,MAAQkJ,EAAOlJ,KAAK2J,cAIhC,eAAC,IAAD,CACEK,UAAWC,SAAc,OAANf,QAAM,IAANA,OAAA,EAAAA,EAAQ1H,YAAR,OAAoB0H,QAApB,IAAoBA,OAApB,EAAoBA,EAAQlJ,OADjD,UAGE,cAAC,IAAD,CAAWwG,GAAI,EAAG0D,QAAQ,WAA1B,sBAGA,cAAC,IAAD,aACEC,GAAG,WACHT,KAAK,WACLU,YAAY,uBACRxB,EAAS,WAAY,CACvByB,SAAU,mBACVC,UAAW,CACTrH,MAAO,EACP0G,QAAS,kCAIf,eAAC,IAAD,WACGT,EAAOlJ,MAAQkJ,EAAOlJ,KAAK2J,QAC3BT,EAAO1H,UAAY0H,EAAO1H,SAASmI,eAItCpB,GACA,eAAC,IAAD,CAAayB,UAAWC,QAAO,OAACf,QAAD,IAACA,OAAD,EAACA,EAAQU,iBAAxC,UACE,cAAC,IAAD,CAAWpD,GAAI,EAAG0D,QAAQ,WAA1B,8BAGA,cAAC,IAAD,aACEC,GAAG,kBACHT,KAAK,WACLU,YAAY,uBACRxB,EAAS,kBAAmB,CAC9ByB,UAAU,MAGd,cAAC,IAAD,UACGnB,EAAOU,iBAAmBV,EAAOU,gBAAgBD,gBAK1D,cAAC,IAAD,CACED,KAAK,SACLjB,UAAWU,EACXvB,MAAM,OACN5C,YAAY,OAJd,SAMGyD,EACG,qBACAF,EACA,UACA,YAEN,cAAC,IAAD,CAAO/B,GAAI,EAAX,SACE,cAAC,IAAD,CAAMrB,QA/IQ,WACxB2D,IACAN,GAAW,SAACnD,GAAD,OAAgBA,MA6IjB,SACGkD,EACG,qBACA,+C,4CClHLgC,EA9GA,WACb,MAAuChK,IAA/BK,EAAR,EAAQA,YAAakC,EAArB,EAAqBA,OAAQ9B,EAA7B,EAA6BA,MAC7B,EAAwBL,oBAAS,GAAjC,mBAAO6J,EAAP,KAAaC,EAAb,KACMrJ,EAAUC,cACT+B,EAAkBC,IAAlBD,eAQDsH,EAAe,WACnBtH,GAAe,IAUXuH,EAAW,SAAC,GAKJ,IAAD,IAJXC,cAIW,aAHXC,gBAGW,aAFXC,UAEW,MAFN,IAEM,EADXpK,EACW,EADXA,SAEA,OACE,eAAC,IAAD,CACEqK,GAAI,CAAE1D,KAAMuD,EAAS,EAAI,EAAGI,GAAI,GAChCjG,GAAI,CAAEsC,KAAM,EAAG2D,GAAIJ,EAAS,EAAI,GAChCjE,QAAQ,QACRQ,SAAS,KACT8D,WAAW,OALb,UAOGJ,GACC,cAAC,IAAD,CAAMC,GAAIA,EAAI3F,QAASuF,EAAvB,SACGhK,KAGHmK,GAAY,cAAC,IAAD,CAAMC,GAAIA,EAAV,SAAepK,QAKnC,OACE,cAAC,IAAD,CACEwK,GAAG,MACHH,GAAI,EACJ/D,EAAG,EACHF,GAAI,WACJe,MAAO,QACPE,SAAS,SANX,SAQE,cAAC,IAAD,CAAWoD,KAAK,eAAhB,SACE,eAAC,IAAD,CAAMC,QAAQ,gBAAgB/E,MAAM,SAASgF,KAAK,OAAlD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMlE,SAAS,MAAM8D,WAAW,OAAhC,SACE,cAAC,IAAD,CAAMH,GAAG,SAAT,sBAIJ,cAAC,IAAD,CACEnE,QAAS,CAAEU,KAAM,QAASC,GAAI,QAC9BnC,QAAS,kBAAMsF,GAASD,IAF1B,SAIGA,EAAO,cAACc,EAAA,EAAD,IAAgB,cAACC,EAAA,EAAD,MAG1B,cAAC,IAAD,CACE5E,QAAS,CAAEU,KAAMmD,EAAO,QAAU,OAAQlD,GAAI,SAC9CkE,UAAW,CAAEnE,KAAM,OAAQC,GAAI,QAFjC,SAIE,eAAC,IAAD,CACEjB,MAAM,SACN+E,QAAS,CAAC,SAAU,iBACpBK,UAAW,CAAC,SAAU,OAHxB,UAKG7K,GAAeI,EAAM,GAAGF,SACvB,cAAC6J,EAAD,CAAUG,GAAG,cAAb,mBAEDlK,IAAgBI,EAAM,GAAGD,OAASC,EAAM,GAAGF,UAC1C,cAAC6J,EAAD,CAAUE,UAAU,EAAMC,GAAG,oBAA7B,yBAIDlK,EACC,cAAC,IAAD,CACE8K,MAAO,CAAEC,eAAgB,QACzBxE,SAAS,KACT8D,WAAW,OACX9F,QAvFK,SAACyG,GACpBA,EAAEC,iBACF/I,IACA1B,EAAQyE,KAAK,WAgFD,oBASA,cAAC8E,EAAD,CAAUG,GAAG,aAAaF,QAAQ,EAAlC,kC,oECvGhBkB,SAAMC,cAAcnD,SAAS,CAC3BoD,WAAY,SAAUC,GACpB,GAAIA,EAAMC,QAAQC,WAAY,CAC5B,IAAIvE,EAAQqE,EAAMA,MAAMrE,MACtBD,EAASsE,EAAMA,MAAMtE,OACrByE,EAAMH,EAAMA,MAAMG,IAEpBA,EAAIC,UACJ,IAAIlF,GAAYQ,EAAS,IAAI2E,QAAQ,GACrCF,EAAIG,KAAOpF,EAAW,gBACtBiF,EAAII,aAAe,SACnBJ,EAAIK,UAAY,QAEhB,IAAIC,EAAOT,EAAMC,QAAQC,WACvBQ,EAAQC,KAAKC,OAAOjF,EAAQwE,EAAIU,YAAYJ,GAAM9E,OAAS,GAC3DmF,EAAQpF,EAAS,EAAKsE,EAAMe,WAAWrF,OAEzCyE,EAAIa,SAASP,EAAMC,EAAOI,GAC1BX,EAAIc,WAUV,IAwBeC,GAxBI,SAAC5J,GAClB,IAAM6J,EAAU7J,EAAMgD,MAAQhD,EAAM8J,WAAc,IAC5C3K,EAAO,CACX4K,SAAU,CACR,CACE5K,KAAM,CAAC0K,EAAQ,IAAMA,GACrBG,gBAAiB,CAAC,UAAW,WAC7B1G,YAAa,MAIbqF,EAAU,CACdsB,OAAQ,CACN7G,SAAS,GAEXwF,WAAW,GAAD,OAAMiB,EAAOd,QAAQ,GAArB,KACVmB,SAAU,CACRC,SAAS,IAIb,OAAO,cAAC,YAAD,CAAUhL,KAAMA,EAAMkF,MAAO,IAAKD,OAAQ,IAAKuE,QAASA,KCdlDyB,GA7BgB,SAACpK,GAC9B,OACE,eAAC,IAAD,CACE4H,KAAM,CAAE9D,KAAM,KAAMC,GAAI,SACxBC,EAAE,OACFT,GAAG,WACHJ,GAAI,EACJkH,UAAW,MACXC,SAAU,SACVC,QAAS,KAPX,UASE,cAAC,IAAD,CAAKhH,GAAG,WAAR,SACE,cAAC,IAAD,CACEe,MAAM,QACNyB,UAAU,SACVyE,cAAc,YACd5G,SAAS,KACTJ,GAAI,EALN,0BAOaxD,EAAMgD,MAPnB,cAO8BhD,EAAMyK,WAGtC,cAAC,IAAD,CAAKjH,GAAI,EAAT,SACE,cAAC,GAAD,CAAYR,MAAOhD,EAAMgD,MAAO8G,WAAY9J,EAAMyK,cC8J3CC,GAlKQ,WACrB,MAAkCtN,mBAAyB,IAA3D,mBAAOuN,EAAP,KAAkBC,EAAlB,KACA,EAAwCxN,mBAAS,GAAjD,mBAAOyN,EAAP,KAAqBC,EAArB,KACA,EAAkC1N,oBAAS,GAA3C,mBAAO2N,EAAP,KAAkBC,EAAlB,KACA,EAAsC5N,mBAAiB,IAAvD,mBAAO6N,EAAP,KAAoBC,EAApB,KACA,EAAkC9N,oBAAS,GAA3C,mBAAO8H,EAAP,KAAkBC,EAAlB,KACA,EAAsC/H,mBAAS,IAA/C,mBAAO+N,EAAP,KAAoBC,EAApB,KACA,EAA0BhO,mBAAS,GAAnC,mBAAO4F,EAAP,KAAcqI,EAAd,KACQC,EAAgBC,cAAhBD,OACAjO,EAAgBL,IAAhBK,YAEFmO,EAAcF,EAAS,EAE7BxM,qBAAU,WACR,IAAKoG,EAAW,CACd,IAAMnE,EAAMnE,EAAamE,IAAI,SACvB0K,EAAW1K,EAAIC,GAAG,SAAS,SAACC,GAChC,IAAM9B,EAAO8B,EAAcC,OAAS,KACpC,GAAI/B,EAAM,CACR,IAAMuM,EAAgBvK,OAAOC,OAAOjC,GACpCyL,EAAac,EAASF,GAAab,WACnCO,EAAe/J,OAAOE,oBAAoBlC,GAAMqM,QAGpD,OAAO,kBAAMzK,EAAI4K,IAAI,QAASF,OAE/B,IAwDH,OACE,cAAC,IAAD,UACwB,IAArBd,EAAU9H,QACT,eAAC,KAAD,CAAQW,GAAI,EAAGoI,cAAc,SAA7B,UACE,cAAC,IAAD,CAAM7F,UAAU,SAASnC,SAAS,KAAK8D,WAAY,OAAQlE,GAAI,EAA/D,SACGuH,EACG,eADM,mBAEMF,EAAe,EAFrB,eAE6BF,EAAU9H,WAEjDkI,GACA,cAAC,IAAD,CACEnD,KAAM,CAAE9D,KAAM,KAAMC,GAAI,SACxBC,EAAE,OACFT,GAAG,WACHJ,GAAI,EACJkH,UAAW,MACXC,SAAU,SACVC,QAAS,KAPX,SASE,uBAAMtE,SA7DU,SAAC4F,GAG3B,GAFAA,EAAMvD,iBACNnD,GAAa,GACT0F,EAAe,EAAIF,EAAU9H,OAC/BiI,EAAgBD,EAAe,OAC1B,CACL,IAAIiB,EAAY,EAChBnB,EAAUvI,KAAI,SAACC,EAASd,GACtBc,EAAG0J,QAAQ3J,KAAI,SAAC4J,EAAcC,GACxBD,EAAQE,WACND,GAASd,EAAY5J,IACvBuK,UAKRT,EAASS,GACTd,GAAa,GAEbtO,EAAG8B,WAAW,SACXC,IAAIpB,EAAYsB,KAChBM,MACAX,MAAK,SAACyD,GACL,IAAM5C,EAAO4C,EAAS5C,OAAON,SAE7BjC,EACGmE,MACA0B,MAAM,UACNA,MAAMwI,GACNxI,MAAM,SACNA,MAAMpF,EAAYsB,KAClBC,IAAI,CACHV,UAAWiB,EAAKjB,UAChBC,SAAUgB,EAAKhB,SACfH,MAAOmB,EAAKnB,MACZgF,MAAO8I,OAIjB3G,GAAa,IAsBH,UACE,cAAC,IAAD,CAAK5B,GAAG,WAAR,SACE,cAAC,IAAD,CACEe,MAAM,QACNyB,UAAU,SACVyE,cAAc,YACd5G,SAAS,KACTJ,GAAI,EACJsC,GAAI,GANN,SAQG6E,EAAUE,GAAcsB,aAG7B,cAAC,IAAD,CAAQjJ,QAAS,EAAGD,GAAI,EAAxB,SACE,cAAC,KAAD,CACEY,KAAM,SACNnE,MAAK,UAAKyL,EAAYN,IAFxB,SAIGF,EAAUE,GAAckB,QAAQ3J,KAAI,SAACjD,EAAMoC,GAAP,OACnC,eAAC,IAAD,CAEE8B,aAAc,GACd+I,QAAQ,QACRpG,GAAI,EACJxC,GAAI,EACJsC,GAAI,EACJhD,MAAM,SACNkB,EAAG,CAAEF,KAAM,QAASC,GAAI,SACxBnC,QAAS,kBArGV,SAACL,GACpB,IAAI8K,EAAmB,aAAOlB,GAC9BkB,EAAexB,GAAgBtJ,EAC/B6J,EAAeiB,GAkGoBC,CAAa/K,IAT9B,UAWE,cAAC,KAAD,CAAO4C,KAAK,KAAKoI,YAAU,EAAC7M,MAAK,UAAK6B,KACtC,cAAC,IAAD,CAAMqC,SAAU,GAAIkC,GAAI,EAAG8B,KAAM,GAAIF,WAAW,OAAhD,SACGvI,EAAKyH,KAER,cAAC,IAAD,CAAM4F,GAAI,EAAG5I,SAAU,GAAvB,SACGzE,EAAK0E,SAfHtC,UAqBb,eAAC,IAAD,CAAM0C,eAAe,eAArB,UACE,cAAC,IAAD,CAAQrC,QA7GI,WACtBiJ,EAAe,EAAI,GACrBC,EAAgBD,EAAe,IA2GnB,+BAGA,cAAC,IAAD,CAAQ1E,KAAK,SAAb,SACGwE,EAAU9H,OAAS,GAAKgI,EACrB,cACA,0BAMbE,GAAa,cAAC,GAAD,CAAO/H,MAAOA,EAAOyH,MAAOE,EAAU9H,e,UCnC/C4J,GArHD,WACZ,IAAQpP,EAAgBL,IAAhBK,YACR,EAA0CD,mBAAS,IAAnD,mBAAOsP,EAAP,KAAsBC,EAAtB,KACA,EAA0BvP,mBAAsB,IAAhD,mBAAO4E,EAAP,KAAc4K,EAAd,KACMhM,EAAQC,cAEd/B,qBAAU,WACRpC,EAAG8B,WAAW,SACXS,MACAX,MAAK,SAAUyD,GACd,IAAI8K,EAAS,aAAO7K,GAEpBD,EAAS+K,SAAQ,SAAUrO,GACzB,IAAMU,EAAOV,EAAIU,OAAON,SACxBgO,EAAUvK,KAAKnD,MAGjByN,EAASC,QAEZ,IAsDH,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKE,UAAW,CAAEjJ,KAAM,OAAQC,GAAI,UAApC,SACE,eAAC,IAAD,CAAOhB,QAAQ,SAASiB,EAAE,KAA1B,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,cAAC,IAAD,oBACA,cAAC,IAAD,wBAGJ,cAAC,IAAD,UACa,OAAVhC,GACCA,EAAMI,KAAI,SAACP,EAAMN,GAAP,OACR,eAAC,IAAD,WACE,cAAC,IAAD,oBAAQM,EAAK3D,UAAY,IAAM2D,EAAK1D,YACpC,cAAC,IAAD,oBAAQ0D,EAAK7D,SAEb,cAAC,IAAD,CAAIgG,EAAE,OAAN,SACE,eAAC,KAAD,CACEgJ,SAAUnL,EAAKlD,MAAQtB,EAAYsB,IACnC0F,MAAO,IACP4I,SAAU,SAAC5E,GAAD,OAtEH,SACzBwD,EACAtK,GAEA,IAAI2L,EAAa,aAAOlL,GACpBmL,EAAa,aAAOT,GAElBU,EAAWvB,EAAMwB,OAAO3N,MACb,QAAb0N,IACFF,EAAS3L,GAAK9D,MAAM,GAAGF,SAAU,EACjC2P,EAAS3L,GAAK9D,MAAM,GAAGD,OAAQ,GAEhB,UAAb4P,IACFF,EAAS3L,GAAK9D,MAAM,GAAGF,SAAU,EACjC2P,EAAS3L,GAAK9D,MAAM,GAAGD,OAAQ,GAEhB,SAAb4P,IACFF,EAAS3L,GAAK9D,MAAM,GAAGF,SAAU,EACjC2P,EAAS3L,GAAK9D,MAAM,GAAGD,OAAQ,GAEjC2P,EAAS7K,KAAKf,GACdoL,EAAiBQ,GACjBP,EAASM,GAgD0BI,CAAmBjF,EAAG9G,IACvCgM,cA3EKC,EA2EyB3L,EAAKpE,MAAM,GA1EpD+P,EAAKjQ,QAAU,QAAUiQ,EAAKhQ,MAAQ,MAAQ,QAsErC,UAME,wBAAQkC,MAAM,QAAd,2BACA,wBAAQA,MAAM,MAAd,uBACA,wBAAQA,MAAM,OAAd,yBAbG6B,GAlEC,IAACiM,YAuFrB,cAAC,IAAD,CAAK1K,MAAM,QAAX,SACE,cAAC,IAAD,CAAQlB,QA1DQ,WACpB,IAAIK,EAAiB,GACrByK,EAActK,KAAI,SAACC,GACjBJ,EAAUK,KAAKN,EAAMK,OAGvBJ,EAAUG,KAAI,SAACC,GACG3F,EAAG8B,WAAW,SAASC,IAAI4D,EAAG1D,KACtCC,IAAI,CACVC,SAAUoD,EAAU,QAGxBrB,EAAM,CACJ4D,SAAU,cACVC,MAAO,QACPC,YAAY,4BACZC,OAAQ,UACRC,SAAU,IACVC,YAAY,KAwCsB4I,GAAI,EAApC,0B,UC4LOC,GApTI,WACjB,IAAQ9N,EAAaE,IAAbF,SACFgB,EAAQC,cACN8M,EAAgBpC,cAAhBoC,OACF9P,EAAUC,cAChB,EAAwBV,mBAAS,IAAjC,mBAAOyG,EAAP,KAAa+J,EAAb,KACA,EAAoCxQ,mBAAS,CAAC,IAA9C,mBAAOyQ,EAAP,KAAmBC,EAAnB,KACA,EAA8B1Q,mBAAS,CAAC,KAAxC,mBAAO2Q,EAAP,KAAgBC,EAAhB,KACA,EAAoC5Q,mBAAS,CAAC,OAA9C,mBAAO6Q,EAAP,KAAmBC,EAAnB,KACA,EAAoC9Q,mBAAS,CAAC,KAA9C,mBAAO+Q,EAAP,KAAmBC,EAAnB,KAaAtP,qBAAU,WACJc,GACUhD,EAAamE,IAAI,SACzBC,GAAG,SAAS,SAACC,GACf,IAAM9B,EAAY8B,EAAcC,OAAS,KACzC,GAAI/B,EAAM,CACR,IAAMuM,EAAgBvK,OAAOC,OAAOjC,GAAMwO,EAAS,GAE/CU,EAAa,GACbC,EAAgB,GAChBC,EAAmB,GACnBC,EAAkB,GACtB9C,EAASf,UAAUmC,SAAQ,SAACzK,EAAeoM,GACzC,IAAIC,EAA0B,GAC9BL,EAAM/L,KAAKD,EAAG8J,UACF9J,EAAG0J,QACTe,SAAQ,SAAC6B,EAAoBC,GACjCF,EAAYpM,KAAKqM,EAAM9K,MACnB8K,EAAMzC,YACRsC,EAAWC,GAAKG,MAGpBN,EAAShM,KAAKoM,GACdH,EAAYjM,KAAKD,EAAG0J,QAAQlJ,WAE9B+K,EAAQlC,EAAS7H,MACjBiK,EAAcS,GACdH,EAAcC,GACdL,EAAWM,GACXJ,EAAcM,SAInB,IAEH,IAsCMK,EAAe,WAEnB,IADA,IAAIC,EAAe,GACVL,EAAI,EAAGA,EAAIN,EAAWtL,OAAQ4L,IAAK,CAE1C,IADA,IAAI1C,EAAU,GACL6C,EAAI,EAAGA,EAAIf,EAAWY,GAAIG,IACjC7C,EAAQzJ,KAAK,CACXsE,GAAImI,OAAOC,aAAa,GAAKJ,GAAGK,cAChCpL,KAAMkK,EAAQU,GAAGG,GACjB1C,UAAW+B,EAAWQ,IAAMG,IAIhCE,EAAaxM,KAAK,CAChB6J,SAAUgC,EAAWM,GACrB1C,YAGJ,OAAO+C,GA2DT,OACE,eAAC,KAAD,CAAQhM,MAAM,SAASU,GAAI,EAAGoI,cAAc,SAA5C,UACE,cAAC,IAAD,UAAUhM,EAAW,YAAc,gBACnC,cAAC,IAAD,CAAKyE,MAAO,CAAEP,KAAM,KAAMC,GAAI,OAA9B,SACE,cAAC,IAAD,CAAajB,MAAM,OAAnB,SACE,uBAAMmD,SArCO,SAAC4F,GACpBA,EAAMvD,iBAENuG,IAEA,IAAM9N,EAAMnE,EAAamE,IAAI,SACzBnB,EACFmB,EAAImO,KAAK,SAAS,SAACnN,GACjB,IAAM5C,EAAO4C,EAASb,MAChBiO,EAAWhO,OAAOE,oBAAoBlC,GAAMwO,EAAS,GAC3D5M,EAAI0B,MAAM0M,GAAUC,OAAO,CACzBvL,OACA8G,UAAWkE,SAIf9N,EAAIuB,KAAK,CACPuB,OACA8G,UAAWkE,MAGfjO,EAAM,CACJ4D,SAAU,cACVC,MAAO,OACPC,YAAY,wBAAD,OAA0B9E,EAAW,SAAW,WAC3D+E,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEdhH,EAAQmB,QAAQ,WAQV,UACE,cAAC,IAAD,CAAW2H,QAAQ,OAAOC,GAAG,OAA7B,uBAGA,eAAC,IAAD,WACE,cAAC,IAAD,CACEE,UAAQ,EACRpH,MAAOmE,EACPoJ,SAAU,SAAC5E,GAAD,OAAOuF,EAAQvF,EAAEgF,OAAO3N,QAClCkH,GAAG,OACHT,KAAK,OACLU,YAAY,kBACZW,GAAI,GACJnD,MAAO,CAAEP,KAAM,IAAKC,GAAI,OAE1B,cAAC,IAAD,CAASjB,MAAM,SAASc,SAAS,MAAM8D,WAAW,OAAlD,0BAIDyG,EAAW/L,KAAI,SAAC4J,EAASC,GAAV,OACd,eAAC,IAAD,CAAKoD,UAAU,cAA0BvM,MAAM,OAA/C,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAK0E,GAAI,GAAT,UACE,cAAC,IAAD,uBACA,cAAC,IAAD,CACEV,UAAQ,EACRX,KAAK,OACLtC,KAAK,WACLQ,MAAO,CAAEP,KAAM,IAAKC,GAAI,KACxBrE,MAAOsM,GAAW,GAClBiB,SAAU,SAAC5E,GAAD,OArJA,SAC5BoG,EACApG,GAEA,IAAIiH,EAAoB,aAAOnB,GAC/BmB,EAAcb,GAAKpG,EAAEgF,OAAO3N,MAC5B0O,EAAckB,GA+IqBC,CAAsBtD,EAAO5D,SAGlD,cAAC,KAAD,CACExE,KAAI,gBAAWoI,GACfvM,MAAK,UAAKuO,EAAWhC,IAFvB,SAIE,cAAC,IAAD,CACEhI,eAAgB,CAAEH,KAAM,GAAIC,GAAI,cAChCyL,SAAU,CAAE1L,KAAM,OAAQC,GAAI,UAFhC,SAIG0L,MAAM5B,EAAW5B,IACfyD,KAAK,GACLtN,KAAI,SAACuN,EAAGpO,GAAJ,OACH,eAAC,IAAD,CAEEiO,SAAS,OACT5D,cAAc,SACdpE,GAAI,CAAE1D,KAAM,EAAGC,GAAI,GAJrB,UAME,cAAC,IAAD,2BAAsBxC,EAAM,KAE5B,cAAC,IAAD,CACEuF,UAAQ,EACRX,KAAK,OACLtC,KAAK,SACLnE,MAAOqO,EAAQ9B,GAAO1K,GACtB0L,SAAU,SAAC5E,GAAD,OAvKhB,SACpB4D,EACA1K,EACA8G,GAEA,IAAIuH,EAAa,aAAO7B,GACxB6B,EAAO3D,GAAO1K,GAAO8G,EAAEgF,OAAO3N,MAC9BsO,EAAW4B,GAgKgCC,CAAc5D,EAAO1K,EAAK8G,IAC3C7G,GAAI,EACJgG,GAAI,EACJnD,MAAO,MAET,cAAC,KAAD,CACEkI,YAAU,EACV7M,MAAK,UAAK6B,GACV0L,SAAU,SAAC5E,GAAD,OA/Gb,SACvBoG,EACApG,GAEA,IAAIgE,EAAmB,aAAO4B,GAC9B5B,EAAeoC,GAAKpG,EAAEgF,OAAO3N,MAC7BwO,EAAc7B,GAyG6ByD,CAAiB7D,EAAO5D,IAH3C,8BAjBK9G,UA4Bf,eAAC,IAAD,CAAM0C,eAAe,gBAAgBwJ,GAAI,EAAzC,UACE,cAAC,IAAD,CACEhM,YAAY,OACZuC,EAAE,OACFxC,GAAI,EACJ6N,UAAU,aACVlJ,KAAK,SACLvE,QAAS,kBA7IJ,SAACL,GACxB,GAAIsM,EAAWtM,GAAO,EAAG,CACvB,IAAIwO,EAAW,aAAOlC,GACtBkC,EAAYxO,KACZuM,EAAciC,IAyIiBC,CAAiB/D,IANlC,wBAUA,cAAC,IAAD,CACEjI,EAAE,OACFxC,GAAI,EACJ6N,UAAU,aACVlJ,KAAK,SACLvE,QAAS,kBA/ID,SAACL,GAC3B,GAAIsM,EAAWtM,GAAO,EAAG,CACvB,IAAIwO,EAAW,aAAOlC,GACtBkC,EAAYxO,KACZuM,EAAciC,IA2IiBE,CAAoBhE,IALrC,iCAWHA,EACC,cAAC,IAAD,CACEwB,GAAI,GACJtH,KAAK,SACLkJ,UAAU,gBACVzN,QAAS,kBAlMF,SAAC6M,GACxB,IAAIa,EAAa,aAAOnB,GACpB+B,EAAY,aAAOnC,GAEvBuB,EAAca,OAAO1B,EAAG,GACxByB,EAAaC,OAAO1B,EAAG,GAEvBL,EAAckB,GACdtB,EAAWkC,GACXpC,GAAc,SAAChM,GAAD,OAAeA,EAAUsO,MAAM,GAAI,MACjDlC,GAAc,SAACpM,GAAD,OAAeA,EAAUsO,MAAM,GAAI,MAwLlBC,CAAiBpE,IAJlC,6BAQE,KACJ,cAAC,KAAD,CAASxK,YAAY,OAAOuE,GAAI,OArFAiG,MAwFpC,eAAC,IAAD,CAAKnJ,MAAM,SAAX,UACE,cAAC,IAAD,CACEtB,GAAI,EACJ6N,UAAU,aACVlJ,KAAK,SACLvE,QAtNQ,WACpBwM,EAAc,GAAD,oBAAKD,GAAL,CAAiB,MAC9BH,EAAW,GAAD,oBAAKD,GAAL,CAAc,MACxBD,EAAc,GAAD,oBAAKD,GAAL,CAAiB,KAC9BK,EAAc,GAAD,oBAAKD,GAAL,CAAiB,SA8MpB,0BAQA,cAAC,IAAD,CACEoB,UAAU,gBACVlJ,KAAK,SACL1E,YAAY,OAHd,kC,4CChTP,SAAS6O,GAAgBtQ,GAC9B,IAAmBuQ,EAAuBvQ,EAAlCwQ,UAAyBC,EAAjC,aAA0CzQ,EAA1C,IACA,EAA+BhD,IAAvBK,EAAR,EAAQA,YAAaI,EAArB,EAAqBA,MAErB,OACE,cAAC,IAAD,2BACMgT,GADN,IAEEC,OAAQ,SAACC,GACP,OAAQlT,EAAM,GAAGD,OAASC,EAAM,GAAGF,UAAYF,EAC7C,cAACkT,EAAD,eAAeI,IAEf,cAAC,IAAD,CAAUpJ,GAAG,eAOhB,SAASqJ,GAAa5Q,GAC3B,IAAmBuQ,EAAuBvQ,EAAlCwQ,UAAyBC,EAAjC,aAA0CzQ,EAA1C,IACA,EAA+BhD,IAAvBK,EAAR,EAAQA,YAAaI,EAArB,EAAqBA,MAErB,OACE,cAAC,IAAD,2BACMgT,GADN,IAEEC,OAAQ,SAACC,GACP,OAAOlT,EAAM,GAAGF,SAAWF,EACzB,cAACkT,EAAD,eAAeI,IAEf,cAAC,IAAD,CAAUpJ,GAAG,eCIRsJ,OA5Bf,WACE,OACE,cAAC,IAAD,UACE,cAAC,EAAD,UACE,eAAC,EAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAASC,OAAK,EAACP,UAAWrQ,IACtC,cAAC,IAAD,CAAO2Q,KAAK,aAAaN,UAAWzL,IACpC,cAACuL,GAAD,CAAiBQ,KAAK,oBAAoBN,UAAW9C,KACrD,cAAC4C,GAAD,CACEQ,KAAK,0BACLN,UAAW9C,KAEb,cAACkD,GAAD,CAAcE,KAAK,cAAcN,UAAW/D,KAE5C,cAAC,IAAD,CAAOqE,KAAK,qBAAqBN,UAAW9F,KAC5C,cAAC,IAAD,CAAOoG,KAAK,IAAZ,SACE,cAAC,IAAD,CAAUvJ,GAAG,wBC1B3ByJ,IAASN,OACP,cAAC,IAAD,UACE,cAAC,GAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.a185d2d5.chunk.js","sourcesContent":["import firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/auth\";\r\nimport \"firebase/compat/firestore\";\r\nimport \"firebase/compat/database\";\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: \"AIzaSyAIUyXqlnq0_p7Dtoej_vx1nQvWS-qUcU0\",\r\n  authDomain: \"react-69990.firebaseapp.com\",\r\n  databaseURL:\r\n    \"https://react-69990-default-rtdb.europe-west1.firebasedatabase.app\",\r\n  projectId: \"react-69990\",\r\n  storageBucket: \"react-69990.appspot.com\",\r\n  messagingSenderId: \"569670275960\",\r\n  appId: \"1:569670275960:web:872cb0c1b85921ca502e8d\",\r\n});\r\nexport const auth = firebase.auth();\r\nexport const db = app.firestore();\r\nexport const realdatabase = app.database();\r\n\r\nexport default app;\r\n","import { useState, useEffect, useContext, createContext } from \"react\";\r\nimport { auth, db } from \"../components/firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport firebase from \"firebase/compat/app\";\r\nimport { AnyPointerEvent } from \"framer-motion/types/gestures/PanSession\";\r\n\r\nconst AuthContext = createContext<any>(null);\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport const AuthContextProvider: React.FC = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState<firebase.User | null>(null);\r\n  const [roles, setRoles] = useState([{ isAdmin: false, isMod: false }]);\r\n  const [loading, setLoading] = useState(true);\r\n  const history = useHistory();\r\n\r\n  const signUp = async (\r\n    email: string,\r\n    password: string,\r\n    firstName: string,\r\n    lastName: string\r\n  ) => {\r\n    return auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((newUser: any) => {\r\n        const userRef = db.collection(\"users\").doc(newUser.user.uid);\r\n        userRef.set({\r\n          userInfo: {\r\n            firstName,\r\n            lastName,\r\n            email: email,\r\n            uid: newUser.user.uid,\r\n            roles,\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\n  const login = (email: string, password: string) => {\r\n    return auth.signInWithEmailAndPassword(email, password);\r\n  };\r\n\r\n  const logout = () => {\r\n    return auth.signOut();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      setCurrentUser(user);\r\n\r\n      if (user) {\r\n        history.replace(\"/Quiz/\");\r\n\r\n        const userRef = db.collection(\"users\").doc(user.uid);\r\n        userRef.get().then((response: any) => {\r\n          setRoles(response.data().userInfo.roles);\r\n        });\r\n      }\r\n      setRoles([{ isAdmin: false, isMod: false }]);\r\n      setLoading(false);\r\n    });\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  \r\nconst contextValue = {\r\n  currentUser,\r\n  signUp,\r\n  login,\r\n  logout,\r\n  roles,\r\n};\r\n\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n","import { useContext, createContext, useState } from \"react\";\r\nconst QuizContext = createContext<{\r\n  editQuiz: boolean;\r\n  changeEditQuiz: (state: boolean) => void;\r\n}>({\r\n  editQuiz: false,\r\n  changeEditQuiz: () => {},\r\n});\r\n\r\nexport const useStore = () => useContext(QuizContext);\r\n\r\ntype Props = {\r\n  children: any;\r\n};\r\n\r\nexport const QuizContextProvider: React.FC<Props> = (props) => {\r\n  const [editQuiz, setEditQuiz] = useState(false);\r\n\r\n  const changeEditQuiz = (state: boolean) => {\r\n    setEditQuiz(state);\r\n  };\r\n\r\n  const contextValue: {\r\n    editQuiz: boolean;\r\n    changeEditQuiz: (state: boolean) => void;\r\n  } = {\r\n    editQuiz,\r\n    changeEditQuiz,\r\n  };\r\n\r\n  return (\r\n    <QuizContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </QuizContext.Provider>\r\n  );\r\n};\r\n","import {\r\n  HStack,\r\n  VStack,\r\n  Text,\r\n  Button,\r\n  Heading,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverBody,\r\n  PopoverArrow,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { realdatabase } from \"./firebase\";\r\nimport { useAuth } from \"../stores/auth-context\";\r\nimport {\r\n  EditIcon,\r\n  DeleteIcon,\r\n  InfoOutlineIcon,\r\n  ArrowDownIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport { useStore } from \"../stores/quiz-context\";\r\n\r\ntype QuizData = {\r\n  firstName: string;\r\n  lastName: string;\r\n  score: number;\r\n};\r\n\r\nconst Main = () => {\r\n  const { changeEditQuiz } = useStore();\r\n  const [quizs, setQuizs] = useState<Array<any>>([]);\r\n  const [quizID, setQuizID] = useState<Array<string>>([]);\r\n  const [openInfo, setOpenInfo] = useState(false);\r\n  const [popInfo, setPopInfo] = useState<Array<QuizData>>([]);\r\n  const { currentUser, roles } = useAuth();\r\n  const history = useHistory();\r\n  const toast = useToast();\r\n\r\n  const renderData = () => {\r\n    const ref = realdatabase.ref(\"/list\");\r\n    ref.on(\"value\", (querySnapshot) => {\r\n      const data = querySnapshot.val() || null;\r\n      if (data) {\r\n        setQuizs(Object.values(data));\r\n        setQuizID(Object.getOwnPropertyNames(data));\r\n      } else {\r\n        setQuizs([]);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    renderData();\r\n  }, [realdatabase]);\r\n\r\n  const playQuizHandler = (row: number) => {\r\n    if (!currentUser) {\r\n      toast({\r\n        position: \"bottom-left\",\r\n        title: \"Error\",\r\n        description: \"You should be logged in to play quiz!\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        isClosable: false,\r\n      });\r\n      return;\r\n    }\r\n    history.replace(`/Quiz/quiz/${row + 1}`);\r\n  };\r\n\r\n  const removeQuizHandler = (quiz: number) => {\r\n    realdatabase.ref(\"/list\").child(quizID[quiz]).remove();\r\n    renderData();\r\n  };\r\n\r\n  const editQuizHandler = (quiz: number) => {\r\n    changeEditQuiz(true);\r\n    history.replace(`/Quiz/edit-quiz/${quiz + 1}`);\r\n  };\r\n\r\n  const handleOpenInfo = (quiz: number) => {\r\n    setOpenInfo((prevState) => !prevState);\r\n    if (!openInfo) {\r\n      realdatabase.ref(\"/list/\" + quizID[quiz]).on(\"value\", (snapshot) => {\r\n        const data = snapshot.val();\r\n        if (data && data.users) {\r\n          const usersData = Object.entries(data.users);\r\n          let tempUser: any = [];\r\n          usersData.map((el) => {\r\n            tempUser.push(el[1]);\r\n          });\r\n          setPopInfo(tempUser);\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const SelectIconGroup: React.FC<{ row: number }> = ({ row }) => {\r\n    return (\r\n      <Box>\r\n        <IconButton\r\n          mr={2}\r\n          aria-label=\"Info\"\r\n          colorScheme=\"gray\"\r\n          icon={<InfoOutlineIcon />}\r\n          onClick={() => handleOpenInfo(row)}\r\n        />\r\n        <IconButton\r\n          mr={2}\r\n          aria-label=\"Edit Quiz\"\r\n          colorScheme=\"gray\"\r\n          icon={<EditIcon />}\r\n          onClick={() => editQuizHandler(row)}\r\n        />\r\n        <IconButton\r\n          mr={2}\r\n          aria-label=\"Remove Quiz\"\r\n          colorScheme=\"gray\"\r\n          icon={<DeleteIcon />}\r\n          onClick={() => removeQuizHandler(row)}\r\n        />\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box>\r\n        <Modal isOpen={openInfo} onClose={() => setOpenInfo(false)}>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>Quiz Stats</ModalHeader>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              {popInfo.length === 0 && (\r\n                <Text align=\"center\">No stats found!</Text>\r\n              )}\r\n              {popInfo.length !== 0 && (\r\n                <Table variant=\"simple\">\r\n                  <Thead>\r\n                    <Tr>\r\n                      <Th>Name</Th>\r\n                      <Th>Score</Th>\r\n                    </Tr>\r\n                  </Thead>\r\n                  <Tbody>\r\n                    {popInfo.map((quiz: QuizData, row: number) => (\r\n                      <Tr key={row}>\r\n                        <Td>{`${quiz.firstName + \" \" + quiz.lastName}`}</Td>\r\n                        <Td>{`${quiz.score}`}</Td>\r\n                      </Tr>\r\n                    ))}\r\n                  </Tbody>\r\n                </Table>\r\n              )}\r\n            </ModalBody>\r\n          </ModalContent>\r\n        </Modal>\r\n      </Box>\r\n      <VStack pt={6} spacing={4}>\r\n        <Heading pb={3}>Quizs</Heading>\r\n        {quizs !== null &&\r\n          quizs.map((quiz, row: number) => (\r\n            <HStack\r\n              key={row}\r\n              display=\"flex\"\r\n              borderRadius={30}\r\n              borderWidth={1}\r\n              bg=\"gray.300\"\r\n              py={2}\r\n            >\r\n              <Box p={4} h=\"70px\" display=\"flex\" alignItems=\"center\">\r\n                <Text fontSize={20} mr={4}>\r\n                  {quiz.name}\r\n                </Text>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  {(roles[0].isAdmin || roles[0].isMod) && (\r\n                    <Box>\r\n                      <Box display={{ base: \"flex\", md: \"none\" }}>\r\n                        <Popover>\r\n                          <PopoverContent w=\"160px\">\r\n                            <PopoverArrow />\r\n                            <PopoverBody justifyContent=\"center\" display=\"flex\">\r\n                              <SelectIconGroup row={row} />\r\n                            </PopoverBody>\r\n                          </PopoverContent>\r\n                          <PopoverTrigger>\r\n                            <IconButton\r\n                              mr={2}\r\n                              aria-label=\"options\"\r\n                              colorScheme=\"gray\"\r\n                              icon={<ArrowDownIcon />}\r\n                            />\r\n                          </PopoverTrigger>\r\n                        </Popover>\r\n                      </Box>\r\n                      <Box display={{ base: \"none\", md: \"flex\" }}>\r\n                        <SelectIconGroup row={row} />\r\n                      </Box>\r\n                    </Box>\r\n                  )}\r\n                  <Button\r\n                    mr={2}\r\n                    size=\"xs\"\r\n                    height=\"48px\"\r\n                    width=\"80px\"\r\n                    borderRadius={15}\r\n                    bg=\"gray.800\"\r\n                    color=\"white\"\r\n                    _hover={{ bg: \"gray.700\" }}\r\n                    onClick={() => playQuizHandler(row)}\r\n                  >\r\n                    Play\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            </HStack>\r\n          ))}\r\n        )\r\n      </VStack>\r\n    </Box>\r\n  );\r\n};\r\nexport default Main;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Flex, Stack, Box, Heading, Link } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormErrorMessage,\r\n} from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { useAuth } from \"../stores/auth-context\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\ninterface FormValues {\r\n  auth: string;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n\r\n}\r\n\r\ninterface ErrorType {\r\n  code: string;\r\n}\r\n\r\nfunction Auth() {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const { signUp, login } = useAuth();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    getValues,\r\n    setError,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm<FormValues>();\r\n\r\n  const authSubmit = (values: FormValues) => {\r\n    setIsLoading(true);\r\n\r\n    if (isLogin) {\r\n      login(values.email, values.password).catch(() =>\r\n        setError(\"auth\", {\r\n          type: \"auth\",\r\n          message: \"Incorrect email or password\",\r\n        })\r\n      );\r\n    } else {\r\n\r\n      if(values.password !== values.confirmPassword)\r\n      {\r\n        setError('confirmPassword', {\r\n          type: 'password',\r\n          message: 'Password fields dont match'\r\n        })\r\n      }\r\n\r\n      signUp(\r\n        values.email,\r\n        values.password,\r\n        values.firstName,\r\n        values.lastName\r\n      ).catch((err: ErrorType) => {\r\n        const errorCode = err.code;\r\n        if (errorCode == \"auth/email-already-in-use\") {\r\n          setError(\"email\", {\r\n            type: \"email\",\r\n            message: \"Email is already in use.\",\r\n          });\r\n        }\r\n        if (errorCode == \"auth/invalid-email\") {\r\n          setError(\"email\", {\r\n            type: \"email\",\r\n            message: \"Email address is not valid.\",\r\n          });\r\n        }\r\n      });\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const authSwitchHandler = () => {\r\n    reset();\r\n    setIsLogin((prevState) => !prevState);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      pt={{ base: 0, md: 12 }}\r\n      align=\"center\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Box\r\n        borderWidth={{ base: 0, md: 1 }}\r\n        width=\"full\"\r\n        maxWidth=\"500px\"\r\n        px={4}\r\n        textAlign=\"center\"\r\n        borderRadius={4}\r\n      >\r\n        <Box my={4}>\r\n          <form onSubmit={handleSubmit(authSubmit)}>\r\n            <Heading>{isLogin ? \"Login\" : \"Register\"}</Heading>\r\n            <Box p={4}>\r\n              {!isLogin && (\r\n                <Box>\r\n                  <FormControl isInvalid={Boolean(errors?.firstName)}>\r\n                    <FormLabel pt={4} htmlFor=\"firstName\">\r\n                      First name\r\n                    </FormLabel>\r\n                    <Input\r\n                      id=\"firstName\"\r\n                      placeholder=\"Enter your first name\"\r\n                      {...register(\"firstName\", {\r\n                        required: \"This is required\",\r\n                        minLength: {\r\n                          value: 4,\r\n                          message: \"Minimum length should be 4\",\r\n                        },\r\n                      })}\r\n                    />\r\n                    <FormErrorMessage>\r\n                      {errors.firstName && errors.firstName.message}\r\n                    </FormErrorMessage>\r\n                  </FormControl>\r\n                  <FormControl isInvalid={Boolean(errors?.lastName)}>\r\n                    <FormLabel pt={4} htmlFor=\"lastName\">\r\n                      Last name\r\n                    </FormLabel>\r\n                    <Input\r\n                      id=\"lastName\"\r\n                      placeholder=\"Enter your last name\"\r\n                      {...register(\"lastName\", {\r\n                        required: \"This is required\",\r\n                        minLength: {\r\n                          value: 4,\r\n                          message: \"Minimum length should be 4\",\r\n                        },\r\n                      })}\r\n                    />\r\n                    <FormErrorMessage>\r\n                      {errors.lastName && errors.lastName.message}\r\n                    </FormErrorMessage>\r\n                  </FormControl>\r\n                </Box>\r\n              )}\r\n              <FormControl isInvalid={Boolean(errors?.email || errors?.auth)}>\r\n                <FormLabel pt={4} htmlFor=\"email\">\r\n                  Email address\r\n                </FormLabel>\r\n                <Input\r\n                  id=\"email\"\r\n                  placeholder=\"Enter your email address\"\r\n                  {...register(\"email\", {\r\n                    required: \"This is required\",\r\n                    minLength: {\r\n                      value: 4,\r\n                      message: \"Minimum length should be 4\",\r\n                    },\r\n                  })}\r\n                />\r\n                <FormErrorMessage>\r\n                  {errors.email && errors.email.message}\r\n                  {errors.auth && errors.auth.message}\r\n                </FormErrorMessage>\r\n              </FormControl>\r\n\r\n              <FormControl\r\n                isInvalid={Boolean(errors?.password || errors?.auth)}\r\n              >\r\n                <FormLabel pt={4} htmlFor=\"password\">\r\n                  Password\r\n                </FormLabel>\r\n                <Input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Enter your password\"\r\n                  {...register(\"password\", {\r\n                    required: \"This is required\",\r\n                    minLength: {\r\n                      value: 6,\r\n                      message: \"Minimum length should be 6\",\r\n                    },\r\n                  })}\r\n                />\r\n                <FormErrorMessage>\r\n                  {errors.auth && errors.auth.message}\r\n                  {errors.password && errors.password.message}\r\n                </FormErrorMessage>\r\n              </FormControl>\r\n\r\n              {!isLogin && (\r\n                <FormControl isInvalid={Boolean(errors?.confirmPassword)}>\r\n                  <FormLabel pt={4} htmlFor=\"password\">\r\n                    Confirm Password\r\n                  </FormLabel>\r\n                  <Input\r\n                    id=\"confirmPassword\"\r\n                    type=\"password\"\r\n                    placeholder=\"Enter your password\"\r\n                    {...register(\"confirmPassword\", {\r\n                      required: true,\r\n                    })}\r\n                  />\r\n                  <FormErrorMessage>\r\n                    {errors.confirmPassword && errors.confirmPassword.message}\r\n                  </FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Box>\r\n            <Button\r\n              type=\"submit\"\r\n              isLoading={isSubmitting}\r\n              width=\"full\"\r\n              colorScheme=\"blue\"\r\n            >\r\n              {isLoading\r\n                ? \"Sending request...\"\r\n                : isLogin\r\n                ? \"Sign In\"\r\n                : \"Sign Up\"}\r\n            </Button>\r\n            <Stack pt={2}>\r\n              <Link onClick={authSwitchHandler}>\r\n                {isLogin\r\n                  ? \"Create new account\"\r\n                  : \"Login with an existing account\"}\r\n              </Link>\r\n            </Stack>\r\n          </form>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n","import React, { useState } from \"react\";\r\nimport { Container, Flex, Box, Text, Link as LinkText } from \"@chakra-ui/react\";\r\nimport { CloseIcon, HamburgerIcon } from \"@chakra-ui/icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../../stores/auth-context\";\r\nimport { useStore } from \"../../stores/quiz-context\";\r\n\r\nconst Header = () => {\r\n  const { currentUser, logout, roles } = useAuth();\r\n  const [show, setShow] = useState(false);\r\n  const history = useHistory();\r\n  const {changeEditQuiz} = useStore();\r\n\r\n  const handleLogout = (e: React.MouseEvent<HTMLElement>) => {\r\n    e.preventDefault();\r\n    logout();\r\n    history.push(\"/Quiz/\");\r\n  };\r\n\r\n  const clickHandler = () => {\r\n    changeEditQuiz(false);\r\n  };\r\n\r\n  interface Props {\r\n    isLast?: boolean;\r\n    isCreate?: boolean;\r\n    to: string;\r\n    children: React.ReactNode;\r\n  }\r\n\r\n  const MenuItem = ({\r\n    isLast = false,\r\n    isCreate = false,\r\n    to = \"/\",\r\n    children,\r\n  }: Props) => {\r\n    return (\r\n      <Text\r\n        mb={{ base: isLast ? 0 : 8, sm: 0 }}\r\n        mr={{ base: 0, sm: isLast ? 0 : 8 }}\r\n        display=\"block\"\r\n        fontSize=\"lg\"\r\n        fontWeight=\"bold\"\r\n      >\r\n        {isCreate && (\r\n          <Link to={to} onClick={clickHandler}>\r\n            {children}\r\n          </Link>\r\n        )}\r\n        {!isCreate && <Link to={to}>{children}</Link>}\r\n      </Text>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      as=\"nav\"\r\n      mb={4}\r\n      p={4}\r\n      bg={\"blue.500\"}\r\n      color={\"white\"}\r\n      position=\"sticky\"\r\n    >\r\n      <Container maxW=\"container.lg\">\r\n        <Flex justify=\"space-between\" align=\"center\" wrap=\"wrap\">\r\n          <Box>\r\n            <Text fontSize=\"2xl\" fontWeight=\"bold\">\r\n              <Link to=\"/Quiz/\">Quiz</Link>\r\n            </Text>\r\n          </Box>\r\n\r\n          <Box\r\n            display={{ base: \"block\", md: \"none\" }}\r\n            onClick={() => setShow(!show)}\r\n          >\r\n            {show ? <CloseIcon /> : <HamburgerIcon />}\r\n          </Box>\r\n\r\n          <Box\r\n            display={{ base: show ? \"block\" : \"none\", md: \"block\" }}\r\n            flexBasis={{ base: \"100%\", md: \"auto\" }}\r\n          >\r\n            <Flex\r\n              align=\"center\"\r\n              justify={[\"center\", \"space-between\"]}\r\n              direction={[\"column\", \"row\"]}\r\n            >\r\n              {currentUser && roles[0].isAdmin && (\r\n                <MenuItem to=\"/Quiz/users\">Users</MenuItem>\r\n              )}\r\n              {currentUser && (roles[0].isMod || roles[0].isAdmin) && (\r\n                <MenuItem isCreate={true} to=\"/Quiz/create-quiz\">\r\n                  Create Quiz\r\n                </MenuItem>\r\n              )}\r\n              {currentUser ? (\r\n                <LinkText\r\n                  style={{ textDecoration: \"none\" }}\r\n                  fontSize=\"lg\"\r\n                  fontWeight=\"bold\"\r\n                  onClick={handleLogout}\r\n                >\r\n                  Logout\r\n                </LinkText>\r\n              ) : (\r\n                <MenuItem to=\"/Quiz/auth\" isLast={true}>\r\n                  Sign In\r\n                </MenuItem>\r\n              )}\r\n            </Flex>\r\n          </Box>\r\n        </Flex>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Chart, ChartOptions } from \"chart.js\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nChart.pluginService.register({\r\n  beforeDraw: function (chart: any) {\r\n    if (chart.options.centertext) {\r\n      var width = chart.chart.width,\r\n        height = chart.chart.height,\r\n        ctx = chart.chart.ctx;\r\n\r\n      ctx.restore();\r\n      var fontSize = (height / 80).toFixed(2); // was: 114\r\n      ctx.font = fontSize + \"em sans-serif\";\r\n      ctx.textBaseline = \"middle\";\r\n      ctx.fillStyle = \"white\";\r\n\r\n      var text = chart.options.centertext, // \"75%\",\r\n        textX = Math.round((width - ctx.measureText(text).width) / 2),\r\n        textY = height / 2 - (chart.titleBlock.height);\r\n\r\n      ctx.fillText(text, textX, textY);\r\n      ctx.save();\r\n    }\r\n  },\r\n});\r\ntype Props = {\r\n  score: number,\r\n  totalScore: number,\r\n};\r\n\r\n\r\nconst ChartScore = (props: Props) => {\r\n  const scoree = (props.score / props.totalScore) * 100;\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [scoree, 100 - scoree],\r\n        backgroundColor: [\"#0087c5\", \"#cde0f1\"],\r\n        borderWidth: 0.5,\r\n      },\r\n    ],\r\n  };\r\n  const options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    centertext:  `${scoree.toFixed(0)}%`,\r\n    tooltips: {\r\n      enabled: false,\r\n    },\r\n  };\r\n\r\n  return <Doughnut data={data} width={300} height={200} options={options} />;\r\n};\r\n\r\nexport default ChartScore;\r\n","import { Box, Text } from \"@chakra-ui/layout\";\r\nimport ChartScore from \"./ChartScore\";\r\n\r\ntype Props = {\r\n  total: number;\r\n  score: number;\r\n};\r\n\r\nconst Score: React.FC<Props> = (props) => {\r\n  return (\r\n    <Box\r\n      maxW={{ base: \"xs\", md: \"500px\" }}\r\n      w=\"full\"\r\n      bg=\"blue.500\"\r\n      pb={8}\r\n      boxShadow={\"2xl\"}\r\n      overflow={\"hidden\"}\r\n      rounded={\"md\"}\r\n    >\r\n      <Box bg=\"gray.800\">\r\n        <Text\r\n          color=\"white\"\r\n          textAlign=\"center\"\r\n          textTransform=\"uppercase\"\r\n          fontSize=\"20\"\r\n          py={3}\r\n        >\r\n          {`Score: ${props.score} / ${props.total}`}\r\n        </Text>\r\n      </Box>\r\n      <Box py={4}>\r\n        <ChartScore score={props.score} totalScore={props.total} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import {\r\n  Box,\r\n  Center,\r\n  Flex,\r\n  Text,\r\n  Button,\r\n  VStack,\r\n  RadioGroup,\r\n  Radio,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { realdatabase, db } from \"../firebase\";\r\nimport { useAuth } from \"../../stores/auth-context\";\r\nimport Score from \"./Score\";\r\n\r\ntype AnswersType = {\r\n  id: string;\r\n  isCorrect: boolean;\r\n  name: string;\r\n};\r\n\r\ntype QuestionType = {\r\n  question: string;\r\n  answers: AnswersType[];\r\n};\r\n\r\nconst Quiz: React.FC = () => {\r\n  const [questions, setQuestions] = useState<QuestionType[]>([]);\r\n  const [currentQuest, setCurrentQuest] = useState(0);\r\n  const [showScore, setShowScore] = useState(false);\r\n  const [quizNameKey, setQuizNameKey] = useState<string>(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedAns, setSelectedAns] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const { quizId }: any = useParams();\r\n  const { currentUser } = useAuth();\r\n\r\n  const currentPage = quizId - 1;\r\n\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      const ref = realdatabase.ref(\"/list\");\r\n      const listener = ref.on(\"value\", (querySnapshot) => {\r\n        const data = querySnapshot.val() || null;\r\n        if (data) {\r\n          const tempData: any = Object.values(data);\r\n          setQuestions(tempData[currentPage].questions);\r\n          setQuizNameKey(Object.getOwnPropertyNames(data)[currentPage]);\r\n        }\r\n      });\r\n      return () => ref.off('value', listener);\r\n    }\r\n  }, []);\r\n\r\n  const updateAnswer = (row: number) => {\r\n    let correctAnswers: any = [...selectedAns];\r\n    correctAnswers[currentQuest] = row;\r\n    setSelectedAns(correctAnswers);\r\n  };\r\n\r\n  const prevQuestionHandler = () => {\r\n    if (currentQuest + 1 > 1) {\r\n      setCurrentQuest(currentQuest - 1);\r\n    }\r\n  };\r\n\r\n  const nextQuestionHandler = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    if (currentQuest + 1 < questions.length) {\r\n      setCurrentQuest(currentQuest + 1);\r\n    } else {\r\n      let tempScore = 0;\r\n      questions.map((el: any, row) => {\r\n        el.answers.map((element: any, index: number) => {\r\n          if (element.isCorrect) {\r\n            if (index == selectedAns[row]) {\r\n              tempScore++;\r\n            }\r\n          }\r\n        });\r\n      });\r\n      setScore(tempScore);\r\n      setShowScore(true);\r\n\r\n      db.collection(\"users\")\r\n        .doc(currentUser.uid)\r\n        .get()\r\n        .then((snapshot: any) => {\r\n          const data = snapshot.data().userInfo;\r\n\r\n          realdatabase\r\n            .ref()\r\n            .child(\"/list/\")\r\n            .child(quizNameKey)\r\n            .child(\"users\")\r\n            .child(currentUser.uid)\r\n            .set({\r\n              firstName: data.firstName,\r\n              lastName: data.lastName,\r\n              email: data.email,\r\n              score: tempScore,\r\n            });\r\n        });\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {questions.length !== 0 && (\r\n        <Center py={9} flexDirection=\"column\">\r\n          <Text textAlign=\"center\" fontSize=\"25\" fontWeight={\"bold\"} py={4}>\r\n            {showScore\r\n              ? \"Quiz Results\"\r\n              : `Question ${currentQuest + 1} of ${questions.length}`}\r\n          </Text>\r\n          {!showScore && (\r\n            <Box\r\n              maxW={{ base: \"xs\", md: \"500px\" }}\r\n              w=\"full\"\r\n              bg=\"blue.500\"\r\n              pb={8}\r\n              boxShadow={\"2xl\"}\r\n              overflow={\"hidden\"}\r\n              rounded={\"md\"}\r\n            >\r\n              <form onSubmit={nextQuestionHandler}>\r\n                <Box bg=\"gray.800\">\r\n                  <Text\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    textTransform=\"uppercase\"\r\n                    fontSize=\"20\"\r\n                    py={3}\r\n                    px={10}\r\n                  >\r\n                    {questions[currentQuest].question}\r\n                  </Text>\r\n                </Box>\r\n                <VStack spacing={2} pt={8}>\r\n                  <RadioGroup\r\n                    name={\"choice\"}\r\n                    value={`${selectedAns[currentQuest]}`}\r\n                  >\r\n                    {questions[currentQuest].answers.map((data, row) => (\r\n                      <Flex\r\n                        key={row}\r\n                        borderRadius={15}\r\n                        bgColor=\"white\"\r\n                        my={4}\r\n                        py={1}\r\n                        px={2}\r\n                        align=\"center\"\r\n                        w={{ base: \"200px\", md: \"400px\" }}\r\n                        onClick={() => updateAnswer(row)}\r\n                      >\r\n                        <Radio size=\"lg\" isRequired value={`${row}`} />\r\n                        <Text fontSize={28} px={3} maxW={30} fontWeight=\"bold\">\r\n                          {data.id}\r\n                        </Text>\r\n                        <Text pl={4} fontSize={20}>\r\n                          {data.name}\r\n                        </Text>\r\n                      </Flex>\r\n                    ))}\r\n                  </RadioGroup>\r\n                </VStack>\r\n                <Flex justifyContent=\"space-around\">\r\n                  <Button onClick={prevQuestionHandler}>\r\n                    Previous question\r\n                  </Button>\r\n                  <Button type=\"submit\">\r\n                    {questions.length - 1 == currentQuest\r\n                      ? \"Submit quiz\"\r\n                      : \"Next question\"}\r\n                  </Button>\r\n                </Flex>\r\n              </form>\r\n            </Box>\r\n          )}\r\n          {showScore && <Score score={score} total={questions.length} />}\r\n        </Center>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Select,\r\n  Container,\r\n  Button,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { db } from \"./firebase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"../stores/auth-context\";\r\n\r\ninterface RoleType {\r\n  isAdmin: Boolean;\r\n  isMod: boolean;\r\n}\r\n\r\ninterface UsersType {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  uid: string;\r\n  roles: RoleType[];\r\n}\r\n\r\nconst Users = () => {\r\n  const { currentUser } = useAuth();\r\n  const [effectedUsers, setEffectedUsers] = useState([]);\r\n  const [users, setUsers] = useState<UsersType[]>([]);\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\")\r\n      .get()\r\n      .then(function (snapshot) {\r\n        let usersInfo = [...users];\r\n        \r\n        snapshot.forEach(function (doc) {\r\n          const data = doc.data().userInfo;\r\n          usersInfo.push(data);\r\n        });\r\n        \r\n        setUsers(usersInfo);\r\n      });\r\n  }, []);\r\n\r\n  const selectRoleValue = (role: RoleType) => {\r\n    return role.isAdmin ? \"admin\" : role.isMod ? \"mod\" : \"user\";\r\n  };\r\n\r\n  const selectInputHandler = (\r\n    event: React.ChangeEvent<HTMLSelectElement>,\r\n    row: number\r\n  ) => {\r\n    let userData: any = [...users];\r\n    let effected: any = [...effectedUsers];\r\n\r\n    const newValue = event.target.value;\r\n    if (newValue === \"mod\") {\r\n      userData[row].roles[0].isAdmin = false;\r\n      userData[row].roles[0].isMod = true;\r\n    }\r\n    if (newValue === \"admin\") {\r\n      userData[row].roles[0].isAdmin = true;\r\n      userData[row].roles[0].isMod = false;\r\n    }\r\n    if (newValue === \"user\") {\r\n      userData[row].roles[0].isAdmin = false;\r\n      userData[row].roles[0].isMod = false;\r\n    }\r\n    effected.push(row);\r\n    setEffectedUsers(effected);\r\n    setUsers(userData);\r\n      \r\n  };\r\n\r\n  const submitHandler = () => {\r\n    let usersData: any = [];\r\n    effectedUsers.map((el) => {\r\n      usersData.push(users[el]);\r\n    });\r\n    \r\n    usersData.map((el: any) => {\r\n      const userRef = db.collection(\"users\").doc(el.uid);\r\n      userRef.set({\r\n        userInfo: usersData[0],\r\n      });\r\n    });\r\n    toast({\r\n      position: \"bottom-left\",\r\n      title: \"Users\",\r\n      description: `Users succesfully updated`,\r\n      status: \"success\",\r\n      duration: 3000,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Box overflowX={{ base: \"auto\", md: \"hidden\" }}>\r\n        <Table variant=\"simple\" w=\"md\">\r\n          <Thead>\r\n            <Tr>\r\n              <Th>Name</Th>\r\n              <Th>Email</Th>\r\n              <Th>Role</Th>\r\n            </Tr>\r\n          </Thead>\r\n          <Tbody>\r\n            {users !== null &&\r\n              users.map((quiz, row) => (\r\n                <Tr key={row}>\r\n                  <Td>{`${quiz.firstName + \" \" + quiz.lastName}`}</Td>\r\n                  <Td>{`${quiz.email}`}</Td>\r\n\r\n                  <Td w=\"full\">\r\n                    <Select\r\n                      disabled={quiz.uid === currentUser.uid}\r\n                      width={170}\r\n                      onChange={(e) => selectInputHandler(e, row)}\r\n                      defaultValue={selectRoleValue(quiz.roles[0])}\r\n                    >\r\n                      <option value=\"admin\">Administrator</option>\r\n                      <option value=\"mod\">Moderator</option>\r\n                      <option value=\"user\">User</option>\r\n                    </Select>\r\n                  </Td>\r\n                </Tr>\r\n              ))}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      <Box align=\"right\">\r\n        <Button onClick={submitHandler} mt={4}>\r\n          Submit\r\n        </Button>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import {\r\n  Center,\r\n  FormControl,\r\n  Input,\r\n  Heading,\r\n  FormLabel,\r\n  Box,\r\n  Button,\r\n  RadioGroup,\r\n  Radio,\r\n  useToast,\r\n  Flex,\r\n  Divider,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { realdatabase } from \"../firebase\";\r\nimport { useStore } from \"../../stores/quiz-context\";\r\n\r\nconst CreateQuiz = () => {\r\n  const { editQuiz } = useStore();\r\n  const toast = useToast();\r\n  const { IdQuiz }: any = useParams()   \r\n  const history = useHistory();\r\n  const [name, setName] = useState(\"\");\r\n  const [newChoices, setNewChoices] = useState([4]);\r\n  const [choices, setChoices] = useState([[]]);\r\n  const [correctAns, setCorrectAns] = useState([null]);\r\n  const [formValues, setFormValues] = useState([[]]);\r\n\r\n  type ChoiceTypes = {\r\n    name: string[];\r\n    isCorrect: boolean;\r\n    id: string;\r\n  };\r\n\r\n  type DataTypes = {\r\n    question: string[];\r\n    answers: any[];\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editQuiz) {\r\n      const ref = realdatabase.ref(\"/list\");\r\n      ref.on(\"value\", (querySnapshot) => {\r\n        const data: any = querySnapshot.val() || null;\r\n        if (data) {\r\n          const tempData: any = Object.values(data)[IdQuiz - 1];\r\n\r\n          let forms: any = [];\r\n          let choicess: any = [];\r\n          let newChoicess: any = [];\r\n          let newCorrect: any = [];\r\n          tempData.questions.forEach((el: DataTypes, i: number) => {\r\n            let choicesName: string[][] = [];\r\n            forms.push(el.question);\r\n            let elAns = el.answers;\r\n            elAns.forEach((ansEl: ChoiceTypes, j: number) => {\r\n              choicesName.push(ansEl.name);\r\n              if (ansEl.isCorrect) {\r\n                newCorrect[i] = j;\r\n              }\r\n            });\r\n            choicess.push(choicesName);\r\n            newChoicess.push(el.answers.length);\r\n          });\r\n          setName(tempData.name);\r\n          setNewChoices(newChoicess);\r\n          setFormValues(forms);\r\n          setChoices(choicess);\r\n          setCorrectAns(newCorrect);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const changeQuestionHandler = (\r\n    i: number,\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let newFormValues: any[] = [...formValues];\r\n    newFormValues[i] = e.target.value;\r\n    setFormValues(newFormValues);\r\n  };\r\n\r\n  const updateChoices = (\r\n    index: number,\r\n    row: number,\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let newArr: any[] = [...choices];\r\n    newArr[index][row] = e.target.value;\r\n    setChoices(newArr);\r\n  };\r\n  const addFormFields = () => {\r\n    setFormValues([...formValues, []]);\r\n    setChoices([...choices, []]);\r\n    setNewChoices([...newChoices, 4]);\r\n    setCorrectAns([...correctAns, null]);\r\n  };\r\n\r\n  const removeFormFields = (i: number) => {\r\n    let newFormValues = [...formValues];\r\n    let choiceValues = [...choices];\r\n\r\n    newFormValues.splice(i, 1);\r\n    choiceValues.splice(i, 1);\r\n\r\n    setFormValues(newFormValues);\r\n    setChoices(choiceValues);\r\n    setNewChoices((prevState) => prevState.slice(0, -1));\r\n    setCorrectAns((prevState) => prevState.slice(0, -1));\r\n  };\r\n\r\n  const QuestionList = () => {\r\n    let questionList = [];\r\n    for (let i = 0; i < formValues.length; i++) {\r\n      let answers = [];\r\n      for (let j = 0; j < newChoices[i]; j++) {\r\n        answers.push({\r\n          id: String.fromCharCode(97 + j).toUpperCase(),\r\n          name: choices[i][j],\r\n          isCorrect: correctAns[i] == j ? true : false,\r\n        });\r\n      }\r\n\r\n      questionList.push({\r\n        question: formValues[i],\r\n        answers,\r\n      });\r\n    }\r\n    return questionList;\r\n  };\r\n\r\n  const handleAddChoices = (row: number) => {\r\n    if (newChoices[row] < 5) {\r\n      let tempChoices = [...newChoices];\r\n      tempChoices[row]++;\r\n      setNewChoices(tempChoices);\r\n    }\r\n  };\r\n  const handleRemoveChoices = (row: number) => {\r\n    if (newChoices[row] > 2) {\r\n      let tempChoices = [...newChoices];\r\n      tempChoices[row]--;\r\n      setNewChoices(tempChoices);\r\n    }\r\n  };\r\n\r\n  const updateCorrectAns = (\r\n    i: number,\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let correctAnswers: any = [...correctAns];\r\n    correctAnswers[i] = e.target.value;\r\n    setCorrectAns(correctAnswers);\r\n  };\r\n\r\n  const handleSubmit = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    QuestionList();\r\n\r\n    const ref = realdatabase.ref(\"/list\");\r\n    if (editQuiz) {\r\n      ref.once(\"value\", (snapshot) => {\r\n        const data = snapshot.val();\r\n        const dataName = Object.getOwnPropertyNames(data)[IdQuiz - 1];\r\n        ref.child(dataName).update({\r\n          name,\r\n          questions: QuestionList(),\r\n        });\r\n      });\r\n    } else {\r\n      ref.push({\r\n        name,\r\n        questions: QuestionList(),\r\n      });\r\n    }\r\n    toast({\r\n      position: \"bottom-left\",\r\n      title: \"Quiz\",\r\n      description: `Quiz was succesfully ${editQuiz ? \"edited\" : \"created\"}`,\r\n      status: \"success\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n    });\r\n    history.replace(\"/Quiz/\");\r\n  };\r\n\r\n  return (\r\n    <Center align=\"center\" py={9} flexDirection=\"column\">\r\n      <Heading>{editQuiz ? \"Edit Quiz\" : \"Create Quiz\"}</Heading>\r\n      <Box width={{ base: \"xs\", md: \"4xl\" }}>\r\n        <FormControl align=\"left\">\r\n          <form onSubmit={handleSubmit}>\r\n            <FormLabel htmlFor=\"name\" id=\"name\">\r\n              Quiz Name\r\n            </FormLabel>\r\n            <Box>\r\n              <Input\r\n                required\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                id=\"name\"\r\n                type=\"text\"\r\n                placeholder=\"Enter quiz name\"\r\n                mb={10}\r\n                width={{ base: 200, md: 300 }}\r\n              />\r\n              <Heading align=\"center\" fontSize=\"3xl\" fontWeight=\"bold\">\r\n                Questions\r\n              </Heading>\r\n            </Box>\r\n            {formValues.map((element, index) => (\r\n              <Box className=\"form-inline\" key={index} align=\"left\">\r\n                <Box>\r\n                  <Box mb={10}>\r\n                    <FormLabel>Question</FormLabel>\r\n                    <Input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"question\"\r\n                      width={{ base: 200, md: 300 }}\r\n                      value={element || \"\"}\r\n                      onChange={(e) => changeQuestionHandler(index, e)}\r\n                    />\r\n                  </Box>\r\n                  <RadioGroup\r\n                    name={`choice${index}`}\r\n                    value={`${correctAns[index]}`}\r\n                  >\r\n                    <Flex\r\n                      justifyContent={{ base: \"\", md: \"flex-start\" }}\r\n                      flexWrap={{ base: \"wrap\", md: \"nowrap\" }}\r\n                    >\r\n                      {Array(newChoices[index])\r\n                        .fill(1)\r\n                        .map((_, row) => (\r\n                          <Flex\r\n                            key={row}\r\n                            flexWrap=\"wrap\"\r\n                            flexDirection=\"column\"\r\n                            mb={{ base: 5, md: 0 }}\r\n                          >\r\n                            <FormLabel>{`Choice ${row + 1}`}</FormLabel>\r\n\r\n                            <Input\r\n                              required\r\n                              type=\"text\"\r\n                              name=\"choice\"\r\n                              value={choices[index][row]}\r\n                              onChange={(e) => updateChoices(index, row, e)}\r\n                              mr={4}\r\n                              mb={2}\r\n                              width={200}\r\n                            />\r\n                            <Radio\r\n                              isRequired\r\n                              value={`${row}`}\r\n                              onChange={(e) => updateCorrectAns(index, e)}\r\n                            >\r\n                              Correct answer\r\n                            </Radio>\r\n                          </Flex>\r\n                        ))}\r\n                    </Flex>\r\n                  </RadioGroup>\r\n                  <Flex justifyContent=\"space-between\" mt={5}>\r\n                    <Button\r\n                      colorScheme=\"blue\"\r\n                      w=\"full\"\r\n                      mr={6}\r\n                      className=\"button add\"\r\n                      type=\"button\"\r\n                      onClick={() => handleAddChoices(index)}\r\n                    >\r\n                      Add Choice\r\n                    </Button>\r\n                    <Button\r\n                      w=\"full\"\r\n                      mr={6}\r\n                      className=\"button add\"\r\n                      type=\"button\"\r\n                      onClick={() => handleRemoveChoices(index)}\r\n                    >\r\n                      Remove Choice\r\n                    </Button>\r\n                  </Flex>\r\n                </Box>\r\n                {index ? (\r\n                  <Button\r\n                    mt={30}\r\n                    type=\"button\"\r\n                    className=\"button remove\"\r\n                    onClick={() => removeFormFields(index)}\r\n                  >\r\n                    Remove Question\r\n                  </Button>\r\n                ) : null}\r\n                <Divider colorScheme=\"blue\" my={45} />\r\n              </Box>\r\n            ))}\r\n            <Box align=\"center\">\r\n              <Button\r\n                mr={6}\r\n                className=\"button add\"\r\n                type=\"button\"\r\n                onClick={addFormFields}\r\n              >\r\n                Add question\r\n              </Button>\r\n              <Button\r\n                className=\"button submit\"\r\n                type=\"submit\"\r\n                colorScheme=\"blue\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Box>\r\n          </form>\r\n        </FormControl>\r\n      </Box>\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default CreateQuiz;\r\n","import React from \"react\";\r\nimport { Route, Redirect, RouteProps } from \"react-router-dom\";\r\nimport { useAuth } from \"./stores/auth-context\";\r\n\r\ninterface PrivateRouteProps extends RouteProps {\r\n  component: any;\r\n}\r\n\r\nexport function PrivateModRoute(props: PrivateRouteProps) {\r\n  const { component: Component, ...rest } = props;\r\n  const { currentUser, roles } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps: any) => {\r\n        return (roles[0].isMod || roles[0].isAdmin) && currentUser ? (\r\n          <Component {...routeProps} />\r\n        ) : (\r\n          <Redirect to=\"/Quiz/\" />\r\n        );\r\n      }}\r\n    ></Route>\r\n  );\r\n}\r\n\r\nexport function PrivateRoute(props: PrivateRouteProps) {\r\n  const { component: Component, ...rest } = props;\r\n  const { currentUser, roles } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps: any) => {\r\n        return roles[0].isAdmin && currentUser ? (\r\n          <Component {...routeProps} />\r\n        ) : (\r\n          <Redirect to=\"/Quiz/\" />\r\n        );\r\n      }}\r\n    ></Route>\r\n  );\r\n}\r\n","import { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Main from \"./components/Main\";\r\nimport Auth from \"./components/Auth\";\r\nimport { CSSReset } from \"@chakra-ui/css-reset\";\r\nimport { AuthContextProvider } from \"./stores/auth-context\";\r\nimport Header from \"./components/NavBar/Navigation\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport Quiz from \"./components/Quiz/Quiz\";\r\nimport Users from \"./components/Users\";\r\nimport CreateQuiz from \"./components/Quiz/CreateQuiz\";\r\nimport { QuizContextProvider } from \"./stores/quiz-context\";\r\nimport { PrivateRoute, PrivateModRoute } from \"./PrivateRoute\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ChakraProvider>\r\n      <AuthContextProvider>\r\n        <QuizContextProvider>\r\n          <CSSReset />\r\n          <Header />\r\n          <Switch>\r\n            <Route path=\"/Quiz/\" exact component={Main} />\r\n            <Route path=\"/Quiz/auth\" component={Auth} />\r\n            <PrivateModRoute path=\"/Quiz/create-quiz\" component={CreateQuiz} />\r\n            <PrivateModRoute\r\n              path=\"/Quiz/edit-quiz/:IdQuiz\"\r\n              component={CreateQuiz}\r\n            />\r\n            <PrivateRoute path=\"/Quiz/users\" component={Users} />\r\n\r\n            <Route path=\"/Quiz/quiz/:quizId\" component={Quiz} />\r\n            <Route path=\"*\">\r\n              <Redirect to=\"/Quiz/\" />\r\n            </Route>\r\n          </Switch>\r\n        </QuizContextProvider>\r\n      </AuthContextProvider>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}